<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MySQL性能优化技巧]]></title>
      <url>/2017/12/18/2017/mysql-tips/</url>
      <content type="html"><![CDATA[<blockquote><p>本文是关于 MySQL 中索引、查询优化等的 Tips。</p></blockquote><a id="more"></a><h2 id="1-索引篇"><a href="#1-索引篇" class="headerlink" title="1. 索引篇"></a>1. 索引篇</h2><p>MySQL 的索引是一颗以 B+树为主的数据结构，叶子节点增加了下个节点的指针。</p><ul><li>MyISAM 索引，叶子节点存放的是数据记录的地址，非聚集索引。</li></ul><ul><li>InnoDB 索引，叶子节点本身就是数据文件，是聚集索引。<ul><li>数据文件本身就是主键索引，所以必须要有主键。尽量使用一个自增字段作为主键。</li><li>辅助索引叶子存储的是主键，辅助索引搜索需要检索两遍索引，先找主键，再找记录。</li></ul></li><li>更多：<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></li></ul><p><strong>MySQL 使用索引的情况</strong>：</p><ul><li>where 子句</li><li>MIN, MAX 函数</li><li>ORDER BY, GROUP BY 子句</li></ul><h3 id="1-0-建立索引的原则"><a href="#1-0-建立索引的原则" class="headerlink" title="1.0 建立索引的原则"></a>1.0 建立索引的原则</h3><ul><li><p>最左匹配（联合索引），mysql 会从左至右匹配，直到遇到范围（&gt;,&lt;,between,like)停止，例如 a = 1 and b = 2 and <strong>c &gt; 3</strong> and d = 4 如果建立(a,b,c,d)顺序的索引，d 是用不到索引的</p></li><li><p>=和 in 的写作顺序可以乱序，mysql 会执行优化</p></li><li><p>在区分度高的列建立索引，Selectivity = count(distinct col)/count(*) ，Selectivity 越接近 1 越好。例如性别列不适合建立索引。</p></li><li><p>注意字符索引的长度，结合区分度，选择合适的字段长度建立索引</p></li><li><p>索引列不要参与计算，不能使用函数和表达式</p></li><li><p>在现有基础上扩展索引，避免新增索引</p></li><li><p>InnoDB 上永远使用自增长的字段作为主键，物理存储按照顺序存放，减少了磁盘开销</p></li></ul><h3 id="1-1-负向条件查询不能使用索引"><a href="#1-1-负向条件查询不能使用索引" class="headerlink" title="1.1 负向条件查询不能使用索引"></a>1.1 负向条件查询不能使用索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>) <span class="keyword">and</span> <span class="keyword">status</span> != <span class="number">0</span></div></pre></td></tr></table></figure><p><code>id</code> 和<code>status</code>将无法使用索引。同样<code>not exists</code>等都不可以。</p><p>尽可能将这些查询改为正向条件，如<code>id in (3, 4)</code></p><h3 id="1-2-联合索引与最左前缀"><a href="#1-2-联合索引与最左前缀" class="headerlink" title="1.2 联合索引与最左前缀"></a>1.2 联合索引与最左前缀</h3><p>有联合索引&lt; a, b, c &gt;，进行精确匹配时（in 或=），索引按照最左前缀原则。组合索引区分度最高的在左边。</p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"># 能用到全部索引的常规写法</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> a = <span class="string">''</span> <span class="keyword">and</span> b= <span class="string">''</span> <span class="keyword">and</span> c <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line"># 也能用到全部索引的常规写法，mysql对查询条件自动优化，与in和=后的写作顺序无关</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> b= <span class="string">''</span> <span class="keyword">and</span> a = <span class="string">''</span> <span class="keyword">and</span> c <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line"># 只能用到a</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> a = <span class="string">''</span> <span class="keyword">and</span> c <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line"># 无法使用索引</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> c <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>);</div><div class="line"></div><div class="line"># 范围列只会用到一个索引，范围后的列无法使用索引，只能用到a</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> a &gt; <span class="number">100</span> <span class="keyword">and</span> b &lt; <span class="number">1000</span>;</div></pre></td></tr></table></figure><h3 id="1-3-查询条件中的函数或表达式不能使用索引"><a href="#1-3-查询条件中的函数或表达式不能使用索引" class="headerlink" title="1.3 查询条件中的函数或表达式不能使用索引"></a>1.3 查询条件中的函数或表达式不能使用索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> <span class="keyword">YEAR</span>(<span class="built_in">date</span>) &lt; = <span class="string">'2017'</span></div></pre></td></tr></table></figure><blockquote><p>如果索引有此列， 也可能是索引全扫描。</p><p><code>SELECT * from</code>table<code>where (b+1)&gt;2 and left(c,2) =&#39;a111&#39;</code></p></blockquote><h3 id="1-4-前导模糊不能使用索引"><a href="#1-4-前导模糊不能使用索引" class="headerlink" title="1.4 前导模糊不能使用索引"></a>1.4 前导模糊不能使用索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> <span class="keyword">desc</span> <span class="keyword">like</span> <span class="string">'%XX'</span></div></pre></td></tr></table></figure><p>请使用搜索引擎代替。</p><h3 id="1-5-使用-limit"><a href="#1-5-使用-limit" class="headerlink" title="1.5 使用 limit"></a>1.5 使用 limit</h3><p>如果明确知道只有一条结果返回，limit 1 能够提高效率</p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> login_name=? <span class="keyword">limit</span> <span class="number">1</span></div></pre></td></tr></table></figure><p>你知道只有一条结果，但数据库并不知道，明确告诉它，让它主动停止游标移动</p><h3 id="1-6-少量的数据不应该索引"><a href="#1-6-少量的数据不应该索引" class="headerlink" title="1.6 少量的数据不应该索引"></a>1.6 少量的数据不应该索引</h3><p>小于 k 级别的数据，索引提供的效率提升并不明显，反而增加了维护索引的代价。</p><h2 id="2-优化查询"><a href="#2-优化查询" class="headerlink" title="2. 优化查询"></a>2. 优化查询</h2><h3 id="2-1-慢查询"><a href="#2-1-慢查询" class="headerlink" title="2.1 慢查询"></a>2.1 慢查询</h3><ol><li>打开慢查询日志</li><li>确定 where 后哪个字段查询记录最少，区分度最高</li><li>explain 查看执行计划</li><li>order by limit 让排序的表优先查</li><li>根据业务场景，优化索引</li></ol><h3 id="2-2-避免使用自动类型转换"><a href="#2-2-避免使用自动类型转换" class="headerlink" title="2.2 避免使用自动类型转换"></a>2.2 避免使用自动类型转换</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> <span class="keyword">col</span> = <span class="number">4</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> <span class="keyword">col</span> = <span class="string">'4'</span>;</div></pre></td></tr></table></figure><p>以上两条都能执行成功，但是请确定真正的类型与列一致。</p><blockquote><p>类型转换可能导致索引失效。</p></blockquote><h3 id="2-3-尽量把数据列设为-NOT-NULL"><a href="#2-3-尽量把数据列设为-NOT-NULL" class="headerlink" title="2.3 尽量把数据列设为 NOT NULL"></a>2.3 尽量把数据列设为 NOT NULL</h3><ul><li>处理更快</li><li>查询简单，不需要监测是否 NULL</li></ul><h3 id="2-4-使用尽量“小”的数据结构"><a href="#2-4-使用尽量“小”的数据结构" class="headerlink" title="2.4 使用尽量“小”的数据结构"></a>2.4 使用尽量“小”的数据结构</h3><ul><li>数据文件变小，减少磁盘开销</li><li>索引变小</li></ul><h3 id="2-5-永远只返回需要的列"><a href="#2-5-永远只返回需要的列" class="headerlink" title="2.5 永远只返回需要的列"></a>2.5 永远只返回需要的列</h3><p>不要 <code>select \*</code> ，可以 <code>count(\*)</code>，why not:</p><ul><li>不能使用聚集索引，要查两次</li><li>增加了 IO，网络开销</li></ul><h3 id="2-6-把一个大的查询拆分成小查询"><a href="#2-6-把一个大的查询拆分成小查询" class="headerlink" title="2.6 把一个大的查询拆分成小查询"></a>2.6 把一个大的查询拆分成小查询</h3><p>虽然 MySQL 能查询百万行数据，但是大量数据发送给客户端要慢得多。</p><p>把关联查询分解，在内存中过滤也能提高效率：</p><ul><li>缓存的效率更高：缓存多事对单表进行的。</li><li>单个查询的锁竞争减小。</li><li>在应用层关联，可以对数据方便拆分。</li><li>查询本身的效率也可能更高：IN()代替关联查询，可以让 mysql 按照 ID 顺序查询，可能比随即的关联要更高效。</li><li>可以减少冗余记录的查询：在应用层关联，只针对小量数据，数据库中只需要查询一次，而关联查询是笛卡尔积，可能被关联多次。</li><li>在应用中实现了哈希关联，而不是 MySQL 的嵌套关联。</li></ul><h3 id="2-7-mysql-查询的过程"><a href="#2-7-mysql-查询的过程" class="headerlink" title="2.7 mysql 查询的过程"></a>2.7 mysql 查询的过程</h3><p>MySQL 执行一个查询的过程：</p><ol><li>客户端发送一条查询给服务器</li><li>服务器先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果，否则进入下一阶段。</li><li>服务器进行 sql 解析，预处理，再由优化器生成对应的执行计划。</li><li>MySQL 根据优化器生成的执行计划，调用存储引擎的 API 来执行查询。</li><li>讲结果返回给客户端。</li></ol><h3 id="2-8-索引优化的级别"><a href="#2-8-索引优化的级别" class="headerlink" title="2.8 索引优化的级别"></a>2.8 索引优化的级别</h3><ul><li>consts 单表中只有一行匹配（主键或唯一索引），在优化阶段即可读取数据</li><li>ref 使用普通的索引（normal index）</li><li>range 对索引范围检索</li></ul><p>优化要达到的目标 ：至少是 <code>range</code> &lt; 要求 <code>ref</code> &lt; 最好 <code>consts</code></p><h3 id="2-9-使用覆盖索引"><a href="#2-9-使用覆盖索引" class="headerlink" title="2.9 使用覆盖索引"></a>2.9 使用覆盖索引</h3><p>如果一个索引包含所有需要查询的字段的值，我们称之为“覆盖索引”。在 explain 的 extra 列可以看到“Using index”的信息。</p><h3 id="2-10-使用延迟关联或子查询优化分页"><a href="#2-10-使用延迟关联或子查询优化分页" class="headerlink" title="2.10 使用延迟关联或子查询优化分页"></a>2.10 使用延迟关联或子查询优化分页</h3><p>MySQL 查询 offset 时，先查询 offset+N，然后放弃前 offset 行，导致 offset 很大时效率低下。可以先对数据进行过滤，然后再进行关联查询。</p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">select</span> a.* </div><div class="line"><span class="keyword">from</span> <span class="string">`table`</span> a, (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> <span class="string">`table`</span> <span class="keyword">where</span> cond <span class="keyword">limit</span> <span class="number">10000</span>, <span class="number">20</span>) b </div><div class="line"><span class="keyword">where</span> a.id=b.id</div></pre></td></tr></table></figure><p>内部使用了覆盖索引，外部使用关联查询。</p><h3 id="2-11-优化关联查询"><a href="#2-11-优化关联查询" class="headerlink" title="2.11 优化关联查询"></a>2.11 优化关联查询</h3><ul><li><p>确保 on 或 using 子句的列上有索引。只需要在关联顺序中的第二个表的相应的列上创建索引。例如表 A 和表 B 用列 C 关联，如果优化器的关联顺序是 B、A，那么就不需要在 B 表的对应列上建上索引，没有用到的索引只会带来额外的负担。</p></li><li><p>确保任何的 Group BY 和 ORDER BY 中的表达式只涉及到一个表中的列，这样才能用索引优化</p><p>​</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《高性能 MySQL》</li><li>《MySQL 技术内幕》</li></ul>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 性能 </tag>
            
            <tag> SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一致性Hash算法（Consistent Hashing）]]></title>
      <url>/2017/12/18/2017/consistent-hashing/</url>
      <content type="html"><![CDATA[<p>本文主要翻译自：<a href="https://www.codeproject.com/Articles/56138/Consistent-hashing" target="_blank" rel="external">https://www.codeproject.com/Articles/56138/Consistent-hashing</a></p><h2 id="1-问题提出"><a href="#1-问题提出" class="headerlink" title="1. 问题提出"></a>1. 问题提出</h2><p>Hash算法经常出现在如分布式缓存，负载均衡等场景中，典型的算法是对N取余：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">key = hash(value) % N</div></pre></td></tr></table></figure><p><a href="https://zh.wikipedia.org/w/index.php?title=David_Karger&amp;action=edit&amp;redlink=1" target="_blank" rel="external">David Karger</a>及其合作者列出了使得一致哈希在互联网分布式缓存中非常有用的几个特性： <a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C#cite_note-KargerEtAl1997-1" target="_blank" rel="external">[1]</a></p><ul><li>冗余少</li><li>负载均衡</li><li>过渡平滑</li><li>存储均衡</li><li>关键词单调</li></ul><p>假设，当前有3台Cache Server，</p><ul><li>在考前流量集中，需要增加2台Server，key = hash(value) % 5</li><li>在考中一台Server挂掉，key = hash(value) % 4</li></ul><p>这意味这，在这些场景中，大部分缓存都将失效。缓存单调性无法满足，过渡也不平滑。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-一致性hash算法"><a href="#2-1-一致性hash算法" class="headerlink" title="2.1 一致性hash算法"></a>2.1 一致性hash算法</h3><p>一致性hash算法采用环形Hash，把key hash到2^32个位置组成一个环。</p><p><img src="circle.jpg" alt=""></p><p>现在考虑有object1-obejct4，使用一致性hash算法，让key1-key4落在圆环上。</p><p><img src="object.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">hash(object1) = key1</div><div class="line">hash(object2) = key2</div><div class="line">...</div></pre></td></tr></table></figure><p>让key找到cache节点：让key1顺时针查找，找到最近的cacheA，以此类推。</p><p><img src="cache.jpg" alt=""></p><h3 id="2-2-考虑Cache挂掉的情况"><a href="#2-2-考虑Cache挂掉的情况" class="headerlink" title="2.2 考虑Cache挂掉的情况"></a>2.2 考虑Cache挂掉的情况</h3><p>如果现在Cache B挂了，落在Cache B上的节点是object4，只需要把object4顺时针映射到Cache C上即可，其他节点无需变动。理想情况下Cache C需要承受2N的流量。</p><p><img src="remove.jpg" alt=""></p><h3 id="2-3-考虑Cache增加的情况"><a href="#2-3-考虑Cache增加的情况" class="headerlink" title="2.3 考虑Cache增加的情况"></a>2.3 考虑Cache增加的情况</h3><p>增加一个Cache D。object2按照顺时针找到Cache D，其他节点也无需变动。</p><p><img src="add.jpg" alt=""></p><h2 id="3-优化"><a href="#3-优化" class="headerlink" title="3. 优化"></a>3. 优化</h2><p>上面解决了一致性的问题。但是Cache还不够平衡。为了解决平衡问题，引入了虚拟节点（Vitural Nodes）。在圆环上不是实际的Cache Node，而是把一个Cache分为多个虚拟Node，通过增加Cache Vitural Node来平衡增加或删除Cache的影响。</p><p><img src="virtual.jpg" alt=""></p><p>通过增加一部虚拟Node到真实Node的映射，达到更平衡的hash.</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">objec1-&gt;cache A2; objec2-&gt;cache A1; objec3-&gt;cache C1; objec4-&gt;cache C2</div></pre></td></tr></table></figure><p><img src="map.jpg" alt=""></p><h2 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4. 参考文档"></a>4. 参考文档</h2><ul><li><a href="https://www.akamai.com/us/en/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf" target="_blank" rel="external">https://www.akamai.com/us/en/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf</a></li><li><a href="http://www.jianshu.com/p/e8fb89bb3a61#" target="_blank" rel="external">http://www.jianshu.com/p/e8fb89bb3a61#</a></li><li><a href="http://www.zsythink.net/archives/1182" target="_blank" rel="external">http://www.zsythink.net/archives/1182</a></li><li><a href="https://www.codeproject.com/Articles/56138/Consistent-hashing" target="_blank" rel="external">https://www.codeproject.com/Articles/56138/Consistent-hashing</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C</a></li></ul>]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hash </tag>
            
            <tag> Cache </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB从3.2升级到3.6的二三事]]></title>
      <url>/2017/12/15/2017/mongodb-upgrade-to-3-6-0/</url>
      <content type="html"><![CDATA[<blockquote><p>Node项目使用MongoDB，从3.2升级到3.6.0的几个坑。</p></blockquote><a id="more"></a><h2 id="0-项目背景"><a href="#0-项目背景" class="headerlink" title="0. 项目背景"></a>0. 项目背景</h2><ul><li>Node.js 8.x</li><li>mongoose 4.11.7 -&gt; 4.13.7</li><li>MongoDB 3.2.x -&gt; 3.6.0</li></ul><h2 id="1-数据库文件不兼容"><a href="#1-数据库文件不兼容" class="headerlink" title="1. 数据库文件不兼容"></a>1. 数据库文件不兼容</h2><p>使用相同的配置文件，MongoDB服务启动出错。配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">systemLog:</span></div><div class="line"><span class="attr">  destination:</span> <span class="string">file</span></div><div class="line"><span class="attr">  path:</span> <span class="attr">d:\MongoDB\log\mongo.log</span></div><div class="line"><span class="attr">  logAppend:</span> <span class="literal">true</span></div><div class="line"><span class="attr">storage:</span></div><div class="line"><span class="attr">  dbPath:</span> <span class="attr">d:\MongoDB\data</span></div></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体原因未知，只好做数据迁移。</p><h2 id="2-aggregate未指定cursor选项导致报错"><a href="#2-aggregate未指定cursor选项导致报错" class="headerlink" title="2. aggregate未指定cursor选项导致报错"></a>2. aggregate未指定cursor选项导致报错</h2><p>报错堆栈：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error:  MongoError: The &apos;cursor&apos; option is required, except for aggregate with the explain argument</div><div class="line">    at Function.MongoError.create (/opt/live/source/live-server/node_modules/mongodb-core/lib/error.js:31:11)</div><div class="line">    at /opt/live/source/live-server/node_modules/mongodb-core/lib/connection/pool.js:497:72</div><div class="line">    at authenticateStragglers (/opt/live/source/live-server/node_modules/mongodb-core/lib/connection/pool.js:443:16)</div><div class="line">    at Connection.messageHandler (/opt/live/source/live-server/node_modules/mongodb-core/lib/connection/pool.js:477:5)</div><div class="line">    at Socket.&lt;anonymous&gt; (/opt/live/source/live-server/node_modules/mongodb-core/lib/connection/connection.js:331:22)</div><div class="line">    at emitOne (events.js:116:13)</div><div class="line">    at Socket.emit (events.js:211:7)</div><div class="line">    at addChunk (_stream_readable.js:263:12)</div><div class="line">    at readableAddChunk (_stream_readable.js:250:11)</div><div class="line">    at Socket.Readable.push (_stream_readable.js:208:10)</div><div class="line">    at TCP.onread (net.js:594:20)</div></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>从MongoDB 3.5.x开始必须在使用aggregate时必须指定cursor选项。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/43442588/mongoose-aggregation-query-fails-in-jest-mockgoose-test-works-elsewhere" target="_blank" rel="external">Mongoose aggregation query fails in Jest/Mockgoose test, works elsewhere</a></li></ul><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果是mongoose项目升级到4.13.7。</p><h2 id="3-Unknown-modifier-pushAll"><a href="#3-Unknown-modifier-pushAll" class="headerlink" title="3. Unknown modifier $pushAll"></a>3. Unknown modifier $pushAll</h2><p>报错堆栈</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MongoError: Unknown modifier: $pushAll</div><div class="line">    at Function.MongoError.create (/opt/live/source/live-server/node_modules/mongodb-core/lib/error.js:31:11)</div><div class="line">    at toError (/opt/live/source/live-server/node_modules/mongodb/lib/utils.js:139:22)</div><div class="line">    at /opt/live/source/live-server/node_modules/mongodb/lib/collection.js:1060:67</div><div class="line">    at /opt/live/source/live-server/node_modules/mongodb-core/lib/connection/pool.js:469:18</div><div class="line">    at _combinedTickCallback (internal/process/next_tick.js:131:7)</div><div class="line">    at process._tickDomainCallback (internal/process/next_tick.js:218:9)</div><div class="line">You have triggered an unhandledRejection, you may have forgotten to catch a Promise rejection:</div></pre></td></tr></table></figure><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>从 MongoDB 3.6开始，此方法被移除了。It is trying to use <code>$pushAll</code>, which is deprecated since 2.4 and it is not in MongoDB 3.6.</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果使用Mongoose 4.x，创建Scheme时，指定<code>usePushEach</code>选项。或者升级到Mongoose 5.x(此时还未发布)。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Schema(obj, &#123; <span class="attr">usePushEach</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure><ul><li><a href="https://github.com/Automattic/mongoose/issues/5870" target="_blank" rel="external">https://github.com/Automattic/mongoose/issues/5870</a></li></ul>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> MongoDB </tag>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Cloud：Discovery]]></title>
      <url>/2017/11/23/2017/learn-spring-cloud-01/</url>
      <content type="html"><![CDATA[<p>使用 Spring Cloud 服务中心可能遇到的的一些问题。</p><a id="more"></a><h2 id="服务中心"><a href="#服务中心" class="headerlink" title="服务中心"></a>服务中心</h2><p><strong>服务中心</strong>：Discovery，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等。</p><p><strong>解决的问题</strong>：<strong>大量</strong>服务间的相互依赖关系改为由服务中心统一管理。符合低解耦特性。</p><p><strong>例如</strong>：Ａ依赖Ｂ依赖Ｃ. B 和 C 是具体服务的提供方，Ａ-&gt;B-&gt;C 依赖关系改为</p><ul><li>A(Discovery Client) -&gt;Discovery Server -&gt;B(Discovery Client)</li></ul><ul><li>B(Discovery Client) -&gt;Discovery Server -&gt;C(Discovery Client)</li></ul><p><img src="eureka-architecture-overview.png" alt=""></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-保护模式"><a href="#1-保护模式" class="headerlink" title="1.保护模式"></a>1.保护模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&apos;RE NOT. </div><div class="line">RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</div></pre></td></tr></table></figure><p>Eureka server 和 client 之间每隔 30 秒会进行一次心跳通信，告诉 server，client 还活着。由此引出两个名词：<br>Renews threshold：server 期望在每分钟中收到的心跳次数<br>Renews (last min)：上一分钟内收到的心跳次数。</p><p>前文说到禁止注册 server 自己为 client，不管 server 是否禁止，阈值（threshold）是 1。client 个数为 n，阈值为 1+2xn（此为一个 server 且禁止自注册的情况）<br>如果是多个 server，且开启了自注册，那么就和 client 一样，是对于其他的 server 来说就是 client，是要x2 的</p><p>Eurake 有一个配置参数 eureka.server.renewalPercentThreshold，定义了 renews 和 renews threshold 的比值，默认值为 0.85。当 server 在 15 分钟内，比值低于 percent，即少了 15%的微服务心跳，server 会进入自我保护状态，Self-Preservation。在此状态下，server 不会删除注册信息，这就有可能导致在调用微服务时，实际上服务并不存在。<br>这种保护状态实际上是考虑了 client 和 server 之间的心跳是因为网络问题，而非服务本身问题，不能简单的删除注册信息</p><p>stackoverflow 上，有人给出的建议是：<br>1、在生产上可以开自注册，部署两个 server<br>2、在本机器上测试的时候，可以把比值调低，比如 0.49<br>3、或者简单粗暴把自我保护模式关闭</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">eureka.server.enableSelfPreservation=false</div></pre></td></tr></table></figure><p>参考资料：<br>1、understanding spring cloud eureka server self-preservation and renew threshold(<a href="http://stackoverflow.com/questions/33921557/understanding-spring-cloud-eureka-server-self-preservation-and-renew-threshold" target="_blank" rel="external">http://stackoverflow.com/questions/33921557/understanding-spring-cloud-eureka-server-self-preservation-and-renew-threshold</a>)<br>2、Understanding eureka client server communicationUnderstanding eureka client server communication(<a href="https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication" target="_blank" rel="external">https://github.com/Netflix/eureka/wiki/Understanding-eureka-client-server-communication</a>)<br>3、Eureka never unregisters a service<br>(<a href="http://stackoverflow.com/questions/32616329/eureka-never-unregisters-a-service" target="_blank" rel="external">http://stackoverflow.com/questions/32616329/eureka-never-unregisters-a-service</a>)</p><p>4、<a href="http://blog.csdn.net/zzp448561636/article/details/70198878" target="_blank" rel="external">http://blog.csdn.net/zzp448561636/article/details/70198878</a></p>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端规范实践]]></title>
      <url>/2017/11/06/2017/css-margin-padding-percentages-relative-width/</url>
      <content type="html"><![CDATA[<p>本文用来记录一些在实践中使用的 W3C 规范，包括易混淆的、不符合常理的点。</p><a id="more"></a><h2 id="margin-和-padding-的父容器依赖"><a href="#margin-和-padding-的父容器依赖" class="headerlink" title="margin 和 padding 的父容器依赖"></a>margin 和 padding 的父容器依赖</h2><p>注意：水平布局下不管是<code>margin</code>还是<code>padding</code>，依赖的都是父容器的<code>width</code>。垂直布局依赖<code>height</code>.</p><p><a href="https://drafts.csswg.org/css-box/#flows" target="_blank" rel="external">https://drafts.csswg.org/css-box/#flows</a></p><table><thead><tr><th>Name:</th><th>padding</th></tr></thead><tbody><tr><td>Percentages:</td><td>width* of containing block</td></tr></tbody></table><table><thead><tr><th>Name:</th><th>margin</th></tr></thead><tbody><tr><td>Percentages:</td><td>width* of containing block</td></tr></tbody></table><blockquote><p>if the <em>containing block</em> is <em>horizontal</em> otherwise the height</p></blockquote><div class="note success"><p>Note that in a <a href="">horizontal flow,</a> percentages on <a href="https://drafts.csswg.org/css-box/#propdef-margin-top" target="_blank" rel="external">margin-top</a> and <a href="https://drafts.csswg.org/css-box/#propdef-margin-bottom" target="_blank" rel="external">margin-bottom</a> are relative to the <em>width</em> of the containing block, not the height (and in vertical flow, <a href="https://drafts.csswg.org/css-box/#propdef-margin-left" target="_blank" rel="external">margin-left</a> and <a href="https://drafts.csswg.org/css-box/#propdef-margin-right" target="_blank" rel="external">margin-right</a> are relative to the height, not the width).</p></div><p><strong>纯 CSS 实现方形布局</strong></p><p>使用 margin/padding-top:100%实现方形布局，可以实现正方形（固定比例）的容器，而无需设置子元素高度。下面的示例展示了图片内容为正方形，不依赖原图比例。也避免了图片未加载时高度塌陷的问题。</p><p>适用场景: 封面图。</p><ul><li>html</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hovereffect"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'1.png'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.hovereffect</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.hovereffect</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">padding-top</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>效果</p><p><img src="1.png" alt=""></p></li></ul><div style="text-align:center"><small>正方形图片，不依赖图片高</small></div><p>优点：灵活运用此属性，不依赖 js 和子元素固定高度。</p><p>未完待续…</p><h2 id="把浮动的元素写在前面"><a href="#把浮动的元素写在前面" class="headerlink" title="把浮动的元素写在前面"></a>把浮动的元素写在前面</h2><p>如果一个 div 中既有 float 元素，又有非 float 元素，应该把 float 元素写在非 float 元素前面。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"home-menu"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"float-r clearfix"</span>&gt;</span></div><div class="line">    ...float元素在前</div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"no-float"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></div><div class="line">    ...非float元素在后</div><div class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure><div class="note warning"><p>因为浏览器从前向后解析 html，非 float 元素占用了文档流。在解析到 float 元素时，浏览器会监测文档流，当浏览器认为一行剩余空间容纳不下 float 元素，此时会另起一行。所以如果不这么写，float 元素有可能被浏览器换行。把 float 写在最前面，float 元素不占用文档流，所以每次都在第一行分配 float 元素。</p></div>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> W3C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android使用base64(Base64.NO_WRAP)并显示到html.img标签中的正确方式]]></title>
      <url>/2017/10/30/2017/android-base64-nowrap-to-html-img/</url>
      <content type="html"><![CDATA[<p>Android使用android.util.Base64.encodeToString(字符串.getBytes(),Base64.NO_WRAP)序列化图片，并且支持显示到网页img标签的格式正确方式。</p><a id="more"></a><div class="note danger"><p>错误的示范：<code>android.util.Base64.encodeToString(字符串.getBytes(),Base64.DEFAULT);</code></p></div><p>网上搜到的Android截屏为base64方法，大都为:</p><p><code>android.util.Base64.encodeToString(字符串.getBytes(),Base64.DEFAULT);</code></p><p>注意此处<strong>Base64.DEFAULT</strong>，如果仅在Android系统中使用Java代码共享数据，那完全没问题。如果要显示到html的img标签中，那就识别不了。</p><div class="note success"><p>正确的序列化方式为: <code>android.util.Base64.encodeToString(字符串.getBytes(),Base64.NO_WRAP);</code></p></div><p>也就是使用<strong>Base64.NO_WRAP</strong>代替Base64.DEFAULT.</p><p><img src="1.png" alt=""></p><p>原因是Base64.DEFAULT选项输出了\n字符。大概每行在76字，字符串默认也会追加一个\n。</p><p><img src="2.png" alt=""></p><p>参考：<a href="https://developer.android.com/reference/android/util/Base64.html" target="_blank" rel="external">https://developer.android.com/reference/android/util/Base64.html</a></p>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring远程调用-HttpInvokerProxyFactoryBean和HttpInvokerServiceExporter]]></title>
      <url>/2017/09/08/2017/spring-dynamic-create-remoting-invoker/</url>
      <content type="html"><![CDATA[<div class="note info"><p>Spring 远程调用HttpInvokerServiceExporter和HttpInvokerProxyFactoryBean的使用小计。</p></div><a id="more"></a><p>Spring 允许通过HTTP协议实现远程调用，提供了<code>HttpInvokerProxyFactoryBean</code>和 <code>HttpInvokerServiceExporter</code>。在服务端暴漏远程调用接口，在客户端生成一个代理对象，通过代理对象调用远程接口，使用方式比较简单直接。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li><p>定义远程接口和实现</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> </span>&#123;</div><div class="line">  <span class="comment">/// method</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppServiceImpl</span> <span class="keyword">implements</span> <span class="title">AppService</span> </span>&#123;</div><div class="line">  <span class="comment">/// method</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>声明<code>HttpInvokerServiceExporter</code> bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"remoteAppService"</span> <span class="attr">class</span>=<span class="string">"com.frame.rmote.RemoteServiceImpl"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"appService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">ref</span>=<span class="string">"remoteAppService"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"me.meiqiu.app.AppService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>暴漏远程URL</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleUrlRequestHandler"</span></span></div><div class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alwaysUseFullPath"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 远程调用的输出，注意向外暴露URL的安全性 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"/remote/app/service"</span> <span class="attr">value-ref</span>=<span class="string">"appService"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></li></ol><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>创建HttpInvokerProxyFactoryBean对象(二选1)</p><p>a. 代码创建方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 动态创建HttpInvokerProxyFactoryBean</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Created by meiqiu.me on 2017/9/1.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpInvokerProxyFactory</span>&lt;<span class="title">Client</span> <span class="keyword">extends</span> <span class="title">Object</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">getProxy</span><span class="params">(String serviceUrl, Class serviceInterface)</span> </span>&#123;</div><div class="line">        HttpInvokerProxyFactoryBean factoryBean = <span class="keyword">new</span> HttpInvokerProxyFactoryBean();</div><div class="line">        factoryBean.setServiceUrl(serviceUrl);</div><div class="line">        factoryBean.setServiceInterface(serviceInterface);</div><div class="line">        factoryBean.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> factoryBean.getObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*public static void main(String[] args) &#123;</span></div><div class="line"><span class="comment">        String serviceUrl = "http://meiqiu.me:8080/remote/app/service";</span></div><div class="line"><span class="comment">        AppService client = new HttpInvokerProxyFactory&lt;AppService&gt;().getProxy(md5ClientService, serviceUrl, AppService.class);</span></div><div class="line"><span class="comment">    &#125;*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>b. xml方式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"appServiceProxy"</span></span></div><div class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;service.url&#125;/remote/app/service"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"me.meiqiu.app.AppService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure><p>完。</p>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker部署nodejs+mongodb+redis+nginx]]></title>
      <url>/2017/08/31/2017/docker-nodejs-mongodb-redis-nginx/</url>
      <content type="html"><![CDATA[<blockquote><p>使用Docker-Compose部署Nodejs应用，Nginx反向代理实现负载均衡。</p></blockquote><a id="more"></a><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="Docker整体架构.png" alt=""></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>docker-conmpose.yml</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'3'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  live-nginx:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">nginx</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">on-failure</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">backend</span></div><div class="line"><span class="attr">    ports:</span> </div><div class="line"><span class="bullet">     -</span> <span class="string">"7000:7000"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">     -</span> <span class="string">/opt/live/live-server/nginx.conf:/etc/nginx/nginx.conf</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">live-server</span></div><div class="line"><span class="attr">  live-server:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">"node:8.4.0"</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">on-failure</span></div><div class="line"><span class="attr">    expose:</span> </div><div class="line"><span class="bullet">     -</span> <span class="string">"7000"</span></div><div class="line">     <span class="comment"># 挂在本地目录到/opt/live/server</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">     -</span> <span class="string">/opt/live/live-server:/opt/live/server</span></div><div class="line">     <span class="comment"># 运行命令</span></div><div class="line"><span class="attr">    command:</span> <span class="string">["npm",</span> <span class="string">"run"</span><span class="string">,</span> <span class="string">"docker"</span><span class="string">]</span></div><div class="line">     <span class="comment"># 工作目录</span></div><div class="line"><span class="attr">    working_dir:</span> <span class="string">"/opt/live/server"</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="attr">      backend:</span></div><div class="line"><span class="attr">        aliases:</span></div><div class="line"><span class="bullet">          -</span> <span class="string">apps</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">live-redis</span></div><div class="line"><span class="bullet">      -</span> <span class="string">live-mongo</span></div><div class="line"><span class="attr">  live-redis:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">"redis"</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">backend</span></div><div class="line"><span class="attr">  live-mongo:</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">backend</span></div><div class="line"><span class="attr">    image:</span> <span class="string">"mongo"</span></div><div class="line"><span class="attr">    expose:</span></div><div class="line"><span class="bullet">     -</span> <span class="string">"27017"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="attr">     - mongodata:</span><span class="string">/data/db</span></div><div class="line"><span class="attr">volumes:</span></div><div class="line"><span class="attr">    mongodata:</span></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  backend:</span></div><div class="line"><span class="attr">    driver:</span> <span class="string">overlay</span></div></pre></td></tr></table></figure><ul><li><p>nginx.conf</p><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="comment">#...ok</span></div></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 上线</span></div><div class="line">docker-compose up -d --scale live-server=<span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># 列出</span></div><div class="line">docker-compose ps</div><div class="line"></div><div class="line"><span class="comment"># 停止</span></div><div class="line">docker-compose stop [service]</div><div class="line"></div><div class="line"><span class="comment"># 下线</span></div><div class="line">docker-compose down [service]</div></pre></td></tr></table></figure><h2 id="简单说明："><a href="#简单说明：" class="headerlink" title="简单说明："></a>简单说明：</h2><ol><li>所有service必须在同一个networks下，这样可通过service名称互相访问。</li><li>live-server可以部署多个，通过scale参数指定</li><li>使用depends_on解决依赖</li><li>数据不要放在docker中，使用volumes挂载宿主机文件夹</li><li>使用restart指定重启策略，注意不要always，可能导致真的异常</li></ol>]]></content>
      
        <categories>
            
            <category> 虚拟化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Node.js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Redis </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Chrome访问6000等端口报ERR_UNSAFE_PORT的问题]]></title>
      <url>/2017/08/25/2017/chrome-localhost-6000-err-unsafe-port/</url>
      <content type="html"><![CDATA[<blockquote><p>/比谁倒霉/ 记录一下一个Chrome的坑：访问6000等端口报ERR_UNSAFE_PORT的问题。</p></blockquote><a id="more"></a><h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>当把服务端口改为6000后，使用Chrome访问不了，习惯性的以为服务没起来，各种检查后，注意到浏览器提示的信息有异常。</p><p><img src="3.png" alt=""></p><p>于是本着<strong>换个浏览器试试？</strong>的原则，访问成功了… - -！</p><h2 id="关于ERR-UNSAFE-PORT"><a href="#关于ERR-UNSAFE-PORT" class="headerlink" title="关于ERR_UNSAFE_PORT"></a>关于ERR_UNSAFE_PORT</h2><p>于是一番搜索下来，发现很多人遇到这个问题。解决方法：换个端口或者修改Chrome设置（懒…网上搜…）。</p><p>事已至此，问题出现在Chrome认为某些端口是不安全的，防止被人利用Chrome干坏事，就屏蔽了…使用Chrome内核的浏览器应该都有此问题。有人找出了<a href="https://src.chromium.org/viewvc/chrome/trunk/src/net/base/net_util.cc?view=markup" target="_blank" rel="external">chromium源码</a>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="comment">// The general list of blocked ports. Will be blocked unless a specific</span></div><div class="line"><span class="comment">// protocol overrides it. (Ex: ftp can use ports 20 and 21)</span></div><div class="line"><span class="comment">// 更详细的信息：https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers</span></div></pre></td></tr></table></figure><h2 id="其他患者的声音"><a href="#其他患者的声音" class="headerlink" title="其他患者的声音"></a>其他患者的声音</h2><blockquote><p>The reason it’s called unsafe is not because it’s unsafe to Chrome, it’s because it’s unsafe to those services, where an attacker may try to use Chrome as a proxy to attacking services on those ports. More explanation here:</p><p><a href="http://jazzy.id.au/default/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html" target="_blank" rel="external">http://jazzy.id.au/default/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html</a></p><p>@<a href="https://superuser.com/users/154032/james-roper" target="_blank" rel="external">James Roper</a></p><p>from:<a href="https://superuser.com/questions/188058/which-ports-are-considered-unsafe-on-chrome" target="_blank" rel="external">https://superuser.com/questions/188058/which-ports-are-considered-unsafe-on-chrome</a></p><p>So, why does Chrome refuse to connect to some ports? Because the Google engineers has gone through the list of well known ports, and worked out how tolerant the protocols that use these ports are to being sent HTTP requests, and if they are tolerant, they’ve marked it as unsafe and so blocked it, to prevent Google Chrome from being an open proxy to a secured network. Should all web browsers do this? Probably.</p><p>@<a href="https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html" target="_blank" rel="external">https://jazzy.id.au/2012/08/23/why_does_chrome_consider_some_ports_unsafe.html</a></p></blockquote><p>感兴趣的姐姐可以继续往下探究。</p>]]></content>
      
        <categories>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> 比谁倒霉 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack使用DllPlugin加速打包，并自动插入html]]></title>
      <url>/2017/08/11/2017/use-dllplugin-webpack/</url>
      <content type="html"><![CDATA[<blockquote><p>本文将指导如何使用 <code>DllPlugin</code> 加速 <code>webpack</code> 构建。</p></blockquote><a id="more"></a><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>在 <code>Vue-webpack-multi</code> 工程中，如果想抽出公共部分，可以使用 CommonsChunk 插件完成。它会把 vue 等公共部分打包为 vendor，每个页面引入 vendor.js。但依然会存在一些问题：</p><ul><li>每次 build 会打包 vendor，耗时</li><li>有些 module 更新缓慢，有些 module 更新频繁，导致客户端经常下载很大的 vendor.js</li></ul><p>那么，如果有上述问题，可以引入 DllPlugin 抽出那些公用的，更新频度低的模块。思路类似与 windows 的 dll 文件。</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>1、添加 webpack.dll.config.js 文件，这一步是为了告诉 DllPlugin 哪些文件需要抽出来，以及生成 manifest.json 配置文件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 这里是哪些module需要抽出来</span></div><div class="line">  entry: &#123;</div><div class="line">    vendor: [<span class="string">"vue-router"</span>, <span class="string">"vuex"</span>, <span class="string">"fastclick"</span>, <span class="string">"axios"</span>]</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">"../static/js"</span>),</div><div class="line">    filename: <span class="string">"[name].dll.js"</span>,</div><div class="line">    library: <span class="string">"[name]_library"</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</div><div class="line">      path: path.join(__dirname, <span class="string">"."</span>, <span class="string">"[name]-manifest.json"</span>),</div><div class="line">      name: <span class="string">"[name]_library"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      compress: &#123;</div><div class="line">        warnings: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">"process.env"</span>: &#123;</div><div class="line">        NODE_ENV: <span class="string">'"production"'</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>2、在 webpack.prod.config.js 文件中添加引用：DllReferencePlugin</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="comment">// ...</span></div><div class="line"></div><div class="line">  <span class="comment">// 加入插件，让webpack使用dll</span></div><div class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</div><div class="line">    context: path.resolve(__dirname, <span class="string">".."</span>),</div><div class="line">    manifest: <span class="built_in">require</span>(<span class="string">"./vendor-manifest.json"</span>)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// ...</span></div><div class="line">];</div></pre></td></tr></table></figure><p>3、在 package.json 文件中加入 scripts：</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">"build:dll": "webpack --config build/webpack.dll.conf.js --progress",</div></pre></td></tr></table></figure><p>4、运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm run build:dll</div></pre></td></tr></table></figure><p>会在 static/js 目录下生成 vendor.dll.js。到此可以把文件加入 html 文件使用了。</p><p>5、更进一步</p><p>是的，以上配置并不会在 html 中自动插入 vendor.dll.js。那么，我们还需要另一个插件 AddAssetHtmlPlugin 来完成这个任务。</p><ul><li><p>首先引入依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm i add-asset-html-webpack-plugin -D</div></pre></td></tr></table></figure></li><li><p>在 webpack.prod.config.js 文件中添加引用：AddAssetHtmlPlugin</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// 加入插件，让webpack使用dll</span></div><div class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</div><div class="line">    context: path.resolve(__dirname, <span class="string">".."</span>),</div><div class="line">    manifest: <span class="built_in">require</span>(<span class="string">"./vendor-manifest.json"</span>)</div><div class="line">  &#125;),</div><div class="line">  <span class="comment">// 复制公共dll.js，并插入html</span></div><div class="line">  <span class="keyword">new</span> AddAssetHtmlPlugin([</div><div class="line">    &#123;</div><div class="line">      filepath: path.resolve(__dirname, <span class="string">"../static/js/vendor.dll.js"</span>), <span class="comment">// 同webpack.dll.conf.js output</span></div><div class="line">      outputPath: utils.assetsPath(<span class="string">"js"</span>),</div><div class="line">      publicPath: path.posix.join(config.build.assetsPublicPath, <span class="string">"static/js"</span>),</div><div class="line">      includeSourcemap: <span class="literal">false</span>,</div><div class="line">      hash: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  ])</div><div class="line">  <span class="comment">// ...</span></div><div class="line">];</div></pre></td></tr></table></figure><p>这时，再次运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure><p>html 已自动引入 vendor.dll.js。</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live/static/js/vendor.dll.js?9052a4023ee8f3900f3a"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live/static/js/vendor.9da0e0be7a97a0e0034e.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live/static/js/embed/room.eb30321a94ba3c461902.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>​</p></li></ul><p>参考：</p><ul><li><a href="https://npm.taobao.org/package/add-asset-html-webpack-plugin" target="_blank" rel="external">https://npm.taobao.org/package/add-asset-html-webpack-plugin</a></li><li><a href="https://segmentfault.com/a/1190000005969643" target="_blank" rel="external">https://segmentfault.com/a/1190000005969643</a></li></ul>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[socket.io常见问题]]></title>
      <url>/2017/08/07/2017/socket-io/</url>
      <content type="html"><![CDATA[<blockquote><p>记录使用Socket.io过程中遇到的各种问题及解决方案。</p></blockquote><a id="more"></a><h5 id="1-PM2服务器启动后，一直400，因为负载均衡导致。"><a href="#1-PM2服务器启动后，一直400，因为负载均衡导致。" class="headerlink" title="1. PM2服务器启动后，一直400，因为负载均衡导致。"></a>1. PM2服务器启动后，一直400，因为负载均衡导致。</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">failed: Error during WebSocket handshake: Unexpected response code: 400</div></pre></td></tr></table></figure><p>可以参考官方配置。</p><p><strong>解决方案</strong>：</p><p>配合Nginx IpHash + Pm2启动多个端口app：</p><p>参考这个 ：</p><p><a href="https://github.com/socketio/socket.io/issues/1942" target="_blank" rel="external">https://github.com/socketio/socket.io/issues/1942</a></p><p><a href="https://github.com/Unitech/pm2/issues/637" target="_blank" rel="external">https://github.com/Unitech/pm2/issues/637</a></p><p><a href="http://www.cnblogs.com/accordion/p/6930152.html" target="_blank" rel="external">http://www.cnblogs.com/accordion/p/6930152.html</a></p><ul><li><p>pm2配置文件，app.json：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"hxdd-7101"</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">7101</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"bin/www"</span>,</div><div class="line">    <span class="attr">"env"</span>: &#123;</div><div class="line">      <span class="attr">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"args"</span>: <span class="string">"['-p7101','-t','plan']"</span>,</div><div class="line">    <span class="attr">"exec_mode"</span>: <span class="string">"cluster"</span>,</div><div class="line">    <span class="attr">"autorestart"</span>: <span class="literal">true</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"hxdd-7102"</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">7102</span>,</div><div class="line">    <span class="attr">"script"</span>: <span class="string">"bin/www"</span>,</div><div class="line">    <span class="attr">"env"</span>: &#123;</div><div class="line">      <span class="attr">"NODE_ENV"</span>: <span class="string">"production"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"args"</span>: <span class="string">"['-p7102','-t','plan']"</span>,</div><div class="line">    <span class="attr">"exec_mode"</span>: <span class="string">"cluster"</span>,</div><div class="line">    <span class="attr">"autorestart"</span>: <span class="literal">true</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Nginx配置：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><div class="line"><span class="attribute">upstream</span> io_nodes &#123;</div><div class="line">   ip_hash; # 这里，可以可以根据cookie等设置，总之是让它访问同一台服务器</div><div class="line">   <span class="attribute">server</span> <span class="number">127.0.0.1:7101</span>;</div><div class="line">   <span class="attribute">server</span> <span class="number">127.0.0.1:7102</span>;</div><div class="line">&#125;</div><div class="line">      </div><div class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /socket.io/ &#123;</div><div class="line">   <span class="attribute">proxy_pass</span>  http://io_nodes;</div><div class="line">   <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</div><div class="line">   <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</div><div class="line">   <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">   <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</div><div class="line">   <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</div><div class="line">   <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">   <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>​</p></li></ul><h5 id="2-总有些数据库连接垃圾数据无法disconnect时删除"><a href="#2-总有些数据库连接垃圾数据无法disconnect时删除" class="headerlink" title="2. 总有些数据库连接垃圾数据无法disconnect时删除"></a>2. 总有些数据库连接垃圾数据无法disconnect时删除</h5><p>如果因为服务器网络或者重启等导致无法监听到disconnect或某些属性丢失，在线的连接无法删除。</p><p><strong>解决方案：</strong></p><p>设置connection的ttl属性。过期自动删除。客户端加入探测机制，ttl时间内在线的，刷新ttl时间，延长租期。</p>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> Node.js </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决使用Idea启动Tomcat, Spring Message中文乱码]]></title>
      <url>/2017/08/02/2017/Spring-message-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>传统的Spring MVC 项目，在IDEA中直接启动Tomcat，Spring-message引用的页面出现乱码。其中messages.properties文件位于：resources目录下，且所有的文件都以UTF-8编码了。</p><blockquote><p>开发环境：</p><ul><li>Spring 3.x</li><li>Tomcat8.x</li><li>IDEA</li><li>JDK8</li></ul></blockquote><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>出现问题的原因是：spring.xml beans配置中没有指定默认编码格式（深层原因未探究）。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 国际化字符串 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span></span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basenames"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/commons<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF/classes/messages<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span> <span class="comment">&lt;!--这里，指定字符编码为UTF-8--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheSeconds"</span> <span class="attr">value</span>=<span class="string">"3600"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Tomcat </tag>
            
            <tag> IDEA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa使用multer上传实现以文件hash(md5)作为文件名附文件秒传原理]]></title>
      <url>/2017/04/11/2017/multer-koa-md5-upload/</url>
      <content type="html"><![CDATA[<p>multer是express模块下的文件上传中间件，类似的中间件还有formidable等，这里以multer为例说明如何实现以文件的hash（如md5）命名。以及文件秒传原理。</p><a id="more"></a><h2 id="文件秒传原理"><a href="#文件秒传原理" class="headerlink" title="文件秒传原理"></a>文件秒传原理</h2><p>在文件上传时，客户端会同步对待上传的文件进行hash计算，以MD5为例，配合客户端极速上传插件，可以很快完成。用计算出的hashCode去服务端查找，如果存在该记录的文件，则无需继续上传，直接标记完成，达到秒传的效果。</p><p>服务端需要做的就是记录存储的文件与hashCode的关系，提供API查询。</p><blockquote><p>文件秒传中存在的问题依然是hash碰撞，按照MD5的存储信息量，在现实中，除非故意如此，其实可以忽略不计。</p><p>这就是为什么， 你好不容易下了片，上传到网盘几秒就成功了。</p></blockquote><h2 id="大文件的MD5计算"><a href="#大文件的MD5计算" class="headerlink" title="大文件的MD5计算"></a>大文件的MD5计算</h2><p>文件秒传存在的意义在于，对于大文件，一方面可以减少服务器存储压力，节省流量，另一方面，可以减少传输时间。</p><p>很多东西，只要一大，就有些问题了。大文件的hash计算也是如此，如果全部读入内存，内存就爆了。好在hash计算本就是分片的（MD5以512位分组来处理输入的信息），那么可以使用流的方式，分片计算，最后算出整个文件的md5。我们可以把这个过程放到第一次文件上传时进行：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</div><div class="line"><span class="comment">// 分片计算</span></div><div class="line">file.stream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">	hash.update(chunk)</div><div class="line">&#125;)</div><div class="line">file.stream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  	<span class="keyword">var</span> md5 = hash.digest(<span class="string">'hex'</span>);</div><div class="line">  	<span class="comment">// 计算完成</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="koa-multer-实现md5作为文件名"><a href="#koa-multer-实现md5作为文件名" class="headerlink" title="koa-multer 实现md5作为文件名"></a>koa-multer 实现md5作为文件名</h2><p>请见<a href="https://github.com/microacup/multer/blob/master/storage/disk.js" target="_blank" rel="external">multer</a> 把修改后的disk.js放到自己的目录。使用示例见下：</p><p>multerUtil.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'koa-multer'</span>);</div><div class="line"><span class="keyword">const</span> diskStorage = <span class="built_in">require</span>(<span class="string">'./disk'</span>);</div><div class="line">multer.diskStorage = diskStorage;</div><div class="line"></div><div class="line"><span class="comment">// 自动创建支持的存储路径</span></div><div class="line"><span class="keyword">const</span> floders = [<span class="string">'avatar'</span>, <span class="string">'record'</span>, <span class="string">'channel'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> floder <span class="keyword">of</span> floders) &#123;</div><div class="line">  <span class="keyword">const</span> path = <span class="string">`uploads/images/<span class="subst">$&#123;floder&#125;</span>`</span>;</div><div class="line">  <span class="keyword">if</span> (!fs.existsSync(path))&#123;</div><div class="line">    fs.mkdirSync(path);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</div><div class="line">  destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> floder = req.body.floder; <span class="comment">// 目标文件夹名称</span></div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/^[a-zA-Z\d]+$/</span>.test(floder)) &#123;</div><div class="line">      cb(<span class="literal">null</span>, <span class="string">`uploads/images/<span class="subst">$&#123;floder&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> upload = multer(&#123;</div><div class="line">  storage: storage,</div><div class="line">  limits: &#123;</div><div class="line">    fileSize: <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">// bytes</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = upload;</div></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> service = <span class="built_in">require</span>(<span class="string">'./service'</span>);</div><div class="line"><span class="keyword">const</span> authService = <span class="built_in">require</span>(<span class="string">'../../auth/service'</span>);</div><div class="line"><span class="keyword">const</span> upload = <span class="built_in">require</span>(<span class="string">'./multerUtil'</span>);</div><div class="line"></div><div class="line">router.post(<span class="string">'/'</span>, upload.single(<span class="string">'file'</span>), service.upload);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>service.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> HttpStatus = <span class="built_in">require</span>(<span class="string">'http-status-codes'</span>);</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Result &#125; <span class="keyword">from</span> <span class="string">'../Result'</span>;</div><div class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">'../../database'</span>).models.user;</div><div class="line"></div><div class="line"><span class="keyword">const</span> service = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * 通用的上传，上传完成返回文件路径</span></div><div class="line"><span class="comment">   * </span></div><div class="line"><span class="comment">   * @param &#123;*&#125; ctx </span></div><div class="line"><span class="comment">   * @param &#123;*&#125; next </span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="keyword">async</span> upload(ctx, next) &#123;</div><div class="line">    <span class="keyword">const</span> floder = ctx.req.body.floder; <span class="comment">// 目标文件夹</span></div><div class="line">    <span class="keyword">const</span> file = ctx.req.file;</div><div class="line">    <span class="keyword">const</span> path = <span class="string">`/images/<span class="subst">$&#123;floder&#125;</span>/<span class="subst">$&#123;file.filename&#125;</span>`</span>;</div><div class="line">    <span class="keyword">return</span> ctx.body = Result.ok(path);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = service;</div></pre></td></tr></table></figure><h2 id="关于Hash"><a href="#关于Hash" class="headerlink" title="关于Hash"></a>关于Hash</h2><p>其实hash，本身就是个摘要，只要能概况这个文件或事物本身，那他也算个hash.比如你的名字。</p>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Koa </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongoose使用aggregate实现按照日期分组统计]]></title>
      <url>/2017/03/27/2017/mongoose-aggregate-by-date/</url>
      <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>统计最近N天的新增用户数量</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很幸运，MongoDB提供了聚合函数aggregate来完成这个任务。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="1-Model"><a href="#1-Model" class="headerlink" title="1. Model"></a>1. Model</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;"_id" : 1, "createdTime" : ISODate("2017-03-07T06:40:58.337+0000"), ...&#125;,</div><div class="line">&#123;"_id" : 2, "createdTime" : ISODate("2017-03-08T06:40:58.337+0000"), ...&#125;,</div><div class="line">&#123;"_id" : 3, "createdTime" : ISODate("2017-03-09T06:40:58.337+0000"), ...&#125;</div></pre></td></tr></table></figure><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">db.users.aggregate(</div><div class="line">	<span class="comment">// Pipeline</span></div><div class="line">	[</div><div class="line">		<span class="comment">// 符合这个条件的文档才被统计</span></div><div class="line">		&#123;</div><div class="line">			$match: &#123;</div><div class="line">			    <span class="string">"createdTime"</span>: &#123; <span class="attr">$gt</span>: ISODate(<span class="string">"2017-01-17T23:41:04.372+0000"</span>) &#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line"></div><div class="line">		<span class="comment">// 定义一些字段，给后面的处理使用，排除、重命名和显示字段</span></div><div class="line">		&#123;</div><div class="line">          	$project: &#123;</div><div class="line">            	<span class="comment">// 时区数据校准，8小时换算成毫秒数为8*60*60*1000=288000后分割成YYYY-MM-DD日期格式便于分组</span></div><div class="line">				day1 : &#123;<span class="attr">$substr</span>: [&#123;<span class="string">"$add"</span>:[<span class="string">"$createdTime"</span>, <span class="number">28800000</span>]&#125;, <span class="number">0</span>, <span class="number">10</span>] &#125;</div><div class="line">				day2: &#123; <span class="attr">year</span>: &#123; <span class="attr">$year</span>: <span class="string">"$createdTime"</span> &#125;, <span class="attr">month</span>: &#123; <span class="attr">$month</span>: <span class="string">"$createdTime"</span> &#125;, <span class="attr">day</span>: &#123; <span class="attr">$dayOfMonth</span>: <span class="string">"$createdTime"</span>&#125; &#125;, <span class="comment">// 因为MongoDB的时区，直接使用这种方法的日期是不正确的</span></div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line"></div><div class="line">		<span class="comment">// 按照给定表达式组合结果</span></div><div class="line">		&#123;</div><div class="line">		  	$group: &#123;</div><div class="line">				_id: <span class="string">"$day1"</span>, <span class="comment">// 将_id设置为day数据</span></div><div class="line">				totalCount:&#123;<span class="attr">$sum</span>: <span class="number">1</span>&#125;, <span class="comment">// 统计count, 每条数据+1</span></div><div class="line">		  	&#125;</div><div class="line">		&#125;,</div><div class="line"></div><div class="line">		<span class="comment">// 排序</span></div><div class="line">		&#123;</div><div class="line">		  	$sort: &#123;</div><div class="line">				_id: <span class="number">1</span></div><div class="line">      		&#125;</div><div class="line">		&#125;,</div><div class="line">	]</div><div class="line">);</div></pre></td></tr></table></figure><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h3><ul><li>$match : 查询，需要同find()一样的参数</li><li>$project：包含、排除、重命名和显示字段</li><li>$group：按照给定表达式组合结果</li><li>$sort：按照给定的字段排序结果</li><li>$sum：总结从集合中的所有文件所定义的值。后面可以是一个字段，表示对这个字段累加，如果是常数，表示每次增加的数值。</li></ul><h3 id="4-返回结果"><a href="#4-返回结果" class="headerlink" title="4. 返回结果"></a>4. 返回结果</h3><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">[&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"2017-02-24"</span>,</div><div class="line">  <span class="attr">"totalCount"</span>: <span class="number">1</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"2017-03-07"</span>,</div><div class="line">  <span class="attr">"totalCount"</span>: <span class="number">1</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attr">"_id"</span>: <span class="string">"2017-03-16"</span>,</div><div class="line">  <span class="attr">"totalCount"</span>: <span class="number">1</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure><h3 id="5-效果"><a href="#5-效果" class="headerlink" title="5. 效果"></a>5. 效果</h3><p><img src="1.jpg" alt=""></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>mongoose ^4.7.5</li><li>Node.js ^7.0.0</li><li>DEBUG:<ul><li>Studio 3T for MongoDB</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation/sum/" target="_blank" rel="external">https://docs.mongodb.com/manual/reference/operator/aggregation/sum/</a></li><li><a href="https://docs.mongodb.com/manual/reference/operator/aggregation-date/" target="_blank" rel="external">https://docs.mongodb.com/manual/reference/operator/aggregation-date/</a></li><li><a href="http://www.fidding.me/article/25" target="_blank" rel="external">http://www.fidding.me/article/25</a></li><li><a href="http://blog.csdn.net/orangleliu/article/details/39932081" target="_blank" rel="external">http://blog.csdn.net/orangleliu/article/details/39932081</a></li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> MongoDB </tag>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在生产环境中使用PM2运行Node]]></title>
      <url>/2017/03/17/2017/node-run-pm2-in-production-env/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.</p><p>Starting an application in production mode is as easy as:</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ pm2 start app.js</div></pre></td></tr></table></figure><p>PM2 is constantly assailed by <a href="https://travis-ci.org/Unitech/pm2" target="_blank" rel="external">more than 1000 tests</a>.</p><p>Official website: <a href="http://pm2.keymetrics.io/" target="_blank" rel="external">http://pm2.keymetrics.io/</a></p><p>Works on Linux (stable) &amp; MacOSx (stable) &amp; Windows (stable).</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>默认情况下，node环境变量是空的，在线上环境运行，肯定需要把环境变量设为生产环境。一般情况下，在<code>package.json</code>的<code>scripts</code> 中设置 <code>cross-env NODE_ENV=production</code> 就完成任务了，但是在pm2中却不灵了。</p><p>简短的使用pm2部署node生产环境的步骤：</p><h3 id="1-创建配置文件app-json"><a href="#1-创建配置文件app-json" class="headerlink" title="1. 创建配置文件app.json"></a>1. 创建配置文件app.json</h3><p>当前你也可以随便起其他名字，或者是一个数组，更高级的用法参考官网文档。</p><p>app.json:</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  "script": "bin/run",</div><div class="line">  "env": &#123;</div><div class="line">    "NODE_ENV": "production"</div><div class="line">  &#125;,</div><div class="line">  "instances": 0,</div><div class="line">  "exec_mode": "cluster",</div><div class="line">  "autorestart": true,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li>env 指定node运行环境，默认空</li><li>instances 运行实例个数，设置为0则根据处理器情况，生成最大的实例数</li><li>exec_mode 默认为fork，指定了instances后则为集群模式</li><li>autorestart 默认false，自动启动</li><li>其他参数可以参考pm2文档: <a href="http://pm2.keymetrics.io/" target="_blank" rel="external">http://pm2.keymetrics.io/</a></li></ul></blockquote><h3 id="2-在package-json中创建scripts-item"><a href="#2-在package-json中创建scripts-item" class="headerlink" title="2. 在package.json中创建scripts item"></a>2. 在package.json中创建scripts item</h3><p>package.json:</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">... </div><div class="line">"scripts": &#123;</div><div class="line">  "pm2": "pm2 start app.json"</div><div class="line">&#125;,</div><div class="line">...</div></pre></td></tr></table></figure><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><p>start it easily:</p><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">$</span> npm run pm2</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">│ App name │ id │ mode    │ pid   │ status  │ restart │ uptime │ cpu │ mem        │ watching │</div><div class="line">├──────────┼────┼─────────┼───────┼─────────┼─────────┼────────┼─────┼────────────┼──────────┤</div><div class="line">│ run      │ 0  │ cluster │ 15480 │ online  │ 23      │ 45s    │ 0%  │ 117.5 MB   │ disabled │</div><div class="line">│ run      │ 1  │ cluster │ 9208  │ online  │ 20      │ 45s    │ 0%  │ 116.1 MB   │ disabled │</div><div class="line">│ run      │ 2  │ cluster │ 13440 │ online  │ 24      │ 45s    │ 0%  │ 121.2 MB   │ disabled │</div><div class="line">│ run      │ 3  │ cluster │ 14228 │ online  │ 23      │ 45s    │ 0%  │ 115.6 MB   │ disabled │</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/" target="_blank" rel="external">PM2官方文档</a></p><p>​</p></li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> pm2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java性能优化权威指南]]></title>
      <url>/2017/02/28/2017/java-performance/</url>
      <content type="html"><![CDATA[<p>读书笔记。</p><a id="more"></a><h2 id="第3章-HotSpot-VM基本架构"><a href="#第3章-HotSpot-VM基本架构" class="headerlink" title="第3章 HotSpot VM基本架构"></a>第3章 HotSpot VM基本架构</h2><ul><li>VM垃圾回收器</li><li>JIT编译器</li><li>VM运行时</li></ul><h3 id="VM类加载："><a href="#VM类加载：" class="headerlink" title="VM类加载："></a>VM类加载：</h3><ol><li>类加载：<ul><li>根据给定的Java类或接口，根据名字找到Java类的二进制文件（二进制字节流），定义Java类，创建java.lang.Class对象;如果没有找到抛出NoClassDefFount异常。</li><li>Java类加载前，必须先加载它的所有超类或接口。</li></ul></li><li>链接：<ul><li>检查类文件的语义、常量池符号、类型；</li><li>创建静态字段初始化标准默认值（int标准值为0，而不是指定的值value=xxx），分配方法表;</li></ul></li><li>初始化:<ul><li>初始化类，运行类构造器（首先要初始化超类，不会初始化超接口）；</li></ul></li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>首个加载器成为：初始类加载器（Initiating Class Loader），最终定义类的类加载器成为：定义类加载器（Definiting Class Loader）。</p><p>层级关系顺序：启动类加载器-&gt;扩展类加载器-&gt;系统类加载器</p><h3 id="线程状态："><a href="#线程状态：" class="headerlink" title="线程状态："></a>线程状态：</h3><ul><li>新线程：线程正在初始化</li><li>线程在Java中：线程正在执行Java代码</li><li>线程在VM中：线程正在HotSpot VM中执行</li><li>线程阻塞</li><li>MONITOR_WAIT：线程正在等待获取竞争的监视锁</li><li>CONDVAR_WAIT：线程正在等待HotSpot VM使用的内部条件变量</li><li>OBJECT_WAIT：线程正在执行java.lang.Object.wait()</li></ul><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>为什么分代（弱分代假设）：</p><ul><li>大多数分配对象的存活时间很短；</li><li>存活时间久的对象很少引用存活时间短的对象；</li></ul><p>2个物理区，不算永久代（用户创建的对象不会在此，是HotSpot存放元数据的地方）：</p><ul><li><p>新生代</p><ul><li><p>Eden:新创建的对象分配在这里（不是所有的，大的对象可能直接分在老年代，因为Eden区放不下）。Minor GC后Eden去几乎总是空的。</p></li><li><p>Survivor（一对：from-to)：这里的对象至少经历了一次Minor GC，在提升到老年代之前还有一次被收集的机会。</p><p>Minor GC之后，from-to交换角色。Minor GC过程中，Survivor可能不足以容纳Eden和另一个Survivor中的存活对象，多余的对象将被移到老年代，这被成为<code>过早提升</code>（Premature Promotion）。这会导致老年代中短期存活对象的增长，可能会引发严重的性能问题。</p></li></ul></li><li><p>老年代</p><p>老年代满了（达到一定阈值）会进行Full GC.</p></li></ul><h2 id="第4章-JVM性能监控"><a href="#第4章-JVM性能监控" class="headerlink" title="第4章 JVM性能监控"></a>第4章 JVM性能监控</h2><h3 id="重要的垃圾收集数据"><a href="#重要的垃圾收集数据" class="headerlink" title="重要的垃圾收集数据"></a>重要的垃圾收集数据</h3><ul><li>当前使用的垃圾收集器</li><li>Java堆的大小</li><li>新生代和老年代的大小</li><li>永久代的大小</li><li>Minor GC的持续时间</li><li>Minor GC的频率</li><li>Minor GC的空间回收量</li><li>Full GC的持续时间</li><li>Full GC的频率</li><li>每个并发垃圾收集周期内的空间回收量</li><li>垃圾收集前后Java堆的占用量</li><li>垃圾收集前后新生代和老年代的占用量</li><li>垃圾收集前后永久代的占用量</li><li>是否老年代或永久代的占用触发了Full GC</li><li>应用是否显示调用了System.gc()</li></ul><h2 id="第6章-Java应用性能分析技巧"><a href="#第6章-Java应用性能分析技巧" class="headerlink" title="第6章 Java应用性能分析技巧"></a>第6章 Java应用性能分析技巧</h2><h3 id="性能优化机会"><a href="#性能优化机会" class="headerlink" title="性能优化机会"></a>性能优化机会</h3><ul><li>使用更高效的算法</li><li>减少锁争用</li><li>为算法生成更有效率的代码</li></ul><h1 id="第7章-性能调优"><a href="#第7章-性能调优" class="headerlink" title="第7章 性能调优"></a>第7章 性能调优</h1><h3 id="性能属性"><a href="#性能属性" class="headerlink" title="性能属性"></a>性能属性</h3><ul><li>吞吐量</li><li>延迟</li><li>内存占用</li></ul><p>这其中任何一个属性性能的提高几乎都是以另一个或者两个属性性能的损失作代价的。很多时候，某一个或两个属性的性能比另一个更重要。</p><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>JVM垃圾收集器调优有是三个基本原则：</p><ul><li>Minor GC回收原则: 每次Minor GC都尽可能多的收集垃圾对象。可以减少应用Full GC的频率。Full GC的持续时间总是很长，是应用程序无法达到其延迟或吞吐量要求的罪魁祸首。</li><li>GC内存最大化原则：处理吞吐量和延迟问题时，垃圾处理器能使用的内存越大，即Java堆空间越大，垃圾收集的效果越好，应用程序运行也越流畅。</li><li>GC调优的3选2原则：在这三个属性中任意选择两个进行JVM垃圾收集器调优。</li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 性能 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决node-sass-called-fsevents-install-error]]></title>
      <url>/2017/01/10/2017/node-sass-called-fsevents-install-error/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Windows环境下运行某个vue全家桶做的项目，git clone 后，运行cnpm install报错，运行npm run dev后也报错。初步判断报错原因是node-sass没有编译通过导致。</p><h2 id="报错情况"><a href="#报错情况" class="headerlink" title="报错情况"></a>报错情况</h2><blockquote><p>cnpm install</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">/ Installing inherits@^2.0.1platform unsupported karma@1.3.0 › chokidar@1.6.1 › fsevents@1.0.17 Package require os(darwin) not compatible with your platform(win32)</div><div class="line">[fsevents@^1.0.0] optional install error: Package require os(darwin) not compatible with your platform(win32)</div><div class="line">path.js:7</div><div class="line">    throw new TypeError('Path must be a string. Received ' + inspect(path));</div><div class="line">    ^</div><div class="line"></div><div class="line">TypeError: Path must be a string. Received undefined</div><div class="line">    at assertPath (path.js:7:11)</div><div class="line">    at Object.join (path.js:468:7)</div><div class="line">    at findSuitableTempDirectory (F:\code\hxdd\live\live-web\node_modules\.2.27.1@chromedriver\install.js:93:30)</div><div class="line">    at Object.&lt;anonymous&gt; (F:\code\hxdd\live\live-</div><div class="line">npminstall version: 2.10.0</div><div class="line">npminstall args: E:\IDE\node\Nodist\v-x64\7.0.0\node.exe</div></pre></td></tr></table></figure><blockquote><p>npm run dev</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">ERROR in %1 is not a valid Win32 application.</div><div class="line">\\?\F:\code\hxdd\live\live-web\node_modules\.4.2.0@node-sass\vendor\win32-x64-51\binding.node</div><div class="line"> @ ./src/scss/app.scss 4:14-135 13:2-17:4 14:20-141</div><div class="line"></div><div class="line">ERROR in %1 is not a valid Win32 application.</div><div class="line">\\?\F:\code\hxdd\live\live-web\node_modules\.4.2.0@node-sass\vendor\win32-x64-51\binding.node</div><div class="line"> @ ./~/.1.0.0@vue-style-loader!./~/.0.25.0@css-loader!./~/.10.0.2@vue-loader/lib/style-rewriter.js?id=data-v-580e2079!./~/.4.1.1@sass-loader!./~/.10.0.2@vue-loader/lib/selector.js?type=styles&amp;index=0!./src/App.vue 4:14-279 13:2-17:4 14:20-285</div><div class="line"></div><div class="line">ERROR in %1 is not a valid Win32 application.</div><div class="line">\\?\F:\code\hxdd\live\live-web\node_modules\.4.2.0@node-sass\vendor\win32-x64-51\binding.node</div><div class="line"> @ ./~/.1.0.0@vue-style-loader!./~/.0.25.0@css-loader!./~/.10.0.2@vue-loader/lib/style-rewriter.js?id=data-v-bab9d198!./~/.4.1.1@sass-loader!./~/.10.0.2@vue-loader/lib/selector.js?type=styles&amp;index=0!./src/views/web/Index.vue 4:14-305 13:2-17:4 14:20-311</div></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>确认先安装一下最新版node-sass(非必需)</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">npm install sass-loader node-sass webpack --save-dev</div></pre></td></tr></table></figure><ul><li>本地编译node-sass</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">cnpm rebuild node-sass</div></pre></td></tr></table></figure><p>到此为止，应该可以了。</p><p>哦对了，我的平台版本是 Window10 x64</p>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Vue </tag>
            
            <tag> Sass </tag>
            
            <tag> fsevents </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Restful从入门到放弃-关于Patch不是幂等的想到的]]></title>
      <url>/2016/12/27/2016/Restful-Patch-Idempotent/</url>
      <content type="html"><![CDATA[<h2 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h2><p>首先回顾一下在Restful的API中，我们用到的HTTP方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET     /blogs       # 获取blog列表</div><div class="line">GET     /blogs/12    # 查看某个具体的blog</div><div class="line">POST    /blogs       # 新建一个blog</div><div class="line">PUT     /blogs/12    # 更新blog 12</div><div class="line">PATCH   /blogs/12    # 更新blog 12</div><div class="line">DELETE  /blogs/12    # 删除ticekt 12</div></pre></td></tr></table></figure><p>我们注意到<strong>更新</strong>操作，有两个方法可以做到：<code>PUT</code>和<code>PATCH</code>， 那么它们有什么区别呢？</p><h2 id="PUT-or-PATCH"><a href="#PUT-or-PATCH" class="headerlink" title="PUT or PATCH"></a>PUT or PATCH</h2><p>PATCH比PUT更年轻，在2010年才成为<a href="https://tools.ietf.org/html/rfc5789" target="_blank" rel="external">正式的标准</a>，有关于它的介绍中说道，它被用来局部更新某个资源，举个例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">PATCH   /users/1    # 更新user 1</div><div class="line">&#123;</div><div class="line">  <span class="attr">"nick"</span>: <span class="string">"王蛋蛋"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>把用户<code>ID=1</code>的昵称改为王蛋蛋。它和<code>PUT</code>的区别就在于，<code>PUT</code>必须提供全量的user属性替换原有的服务器资源。而<code>PATCH</code>只会更新提供的字段。</p><p>假如user中还有一个version字段用来记录版本，每次PATCH，<code>version++</code>。正因为这样的<strong>不可控性</strong> ，所以<code>PATCH</code>被定义为<strong>可能</strong>是非幂等（idempotent ）的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">The difference between the PUT and PATCH requests is reflected in the</div><div class="line">way the server processes the enclosed entity to modify the resource</div><div class="line">identified by the Request-URI.  In a PUT request, the enclosed entity</div><div class="line">is considered to be a modified version of the resource stored on the</div><div class="line">origin server, and the client is requesting that the stored version</div><div class="line">be replaced.  With PATCH, however, the enclosed entity contains a set</div><div class="line">of instructions describing how a resource currently residing on the</div><div class="line">origin server should be modified to produce a new version.  The PATCH</div><div class="line">method affects the resource identified by the Request-URI, and it</div><div class="line">also MAY have side effects on other resources; i.e., new resources</div><div class="line">may be created, or existing ones modified, by the application of a</div><div class="line">PATCH.</div><div class="line"></div><div class="line">PATCH is neither safe nor idempotent as defined by [RFC2616], Section 9.1.</div></pre></td></tr></table></figure><p>所以，如果是需要全部更新属性，那就是用PUT，如果是局部更新，为了节约带宽，请使用PATCH。在接下来的Restful api设计中，还会提到为什么github不使用PATCH。</p><h2 id="关于幂等"><a href="#关于幂等" class="headerlink" title="关于幂等"></a>关于幂等</h2><h3 id="哪些叫幂等或-且安全的方法？"><a href="#哪些叫幂等或-且安全的方法？" class="headerlink" title="哪些叫幂等或/且安全的方法？"></a>哪些叫幂等或/且安全的方法？</h3><p>安全方法是指<strong>不修改资源</strong>的 HTTP 方法。譬如，当使用 GET 或者 HEAD 作为资源 URL，都必须不去改变资源。然而，这并不全准确。意思是：它不改变资源的 表示形式。对于安全方法，它仍然可能改变服务器上的内容或资源，但这必须不导致不同的表现形式。</p><p><strong>HTTP 幂等方法是指无论调用多少次都不会有不同结果的 HTTP 方法。它无论是调用一次，还是N次都无关紧要。结果仍应相同。</strong>再次强调， 它只作用于结果而非资源本身。它仍可能被操纵（如一个更新的 timestamp），提供这一信息并不影响（当前）资源的表现形式。</p><p>例如：GET当前时间是幂等的，虽然每次获取的结果不同，但它并没有改变时间这个资源本身，而是只读。所以结果总是一个时间戳。表示形式没有被改变。</p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">GET /time # 获取当前时间</div></pre></td></tr></table></figure><h3 id="还有哪些方法不是幂等的呢？"><a href="#还有哪些方法不是幂等的呢？" class="headerlink" title="还有哪些方法不是幂等的呢？"></a>还有哪些方法不是幂等的呢？</h3><table><thead><tr><th>HTTP Method</th><th>Idempotent</th><th>Safe</th></tr></thead><tbody><tr><td>OPTIONS</td><td>yes</td><td>yes</td></tr><tr><td>GET</td><td>yes</td><td>yes</td></tr><tr><td>HEAD</td><td>yes</td><td>yes</td></tr><tr><td>PUT</td><td>yes</td><td>no</td></tr><tr><td>POST<em>**</em></td><td><strong>no</strong></td><td>no</td></tr><tr><td>DELETE</td><td>yes</td><td>no</td></tr><tr><td>PATCH</td><td><strong>no</strong></td><td>no</td></tr></tbody></table><p>可以看到，只有POST和PATCH是非幂等的。</p><h2 id="Restful-API建议"><a href="#Restful-API建议" class="headerlink" title="Restful API建议"></a>Restful API建议</h2><p>在构建Restful API时，建议：</p><ul><li><p>一个 API 实现 [PATCH] 必须是原子的。它一定不能出现只 [GET] 到被 [PATCH] 更新了一半的资源。如果不能做到用PUT代替。</p></li><li><p>明确告诉调用者，API的副作用，是否幂等，以免不必要的疑惑。</p><p>​</p></li></ul><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>在<a href="https://developer.github.com/v3/#http-verbs" target="_blank" rel="external">Github Api</a>中，使用了Post代替了Patch，它是这么说的：</p><table><thead><tr><th>Verb</th><th>Description</th></tr></thead><tbody><tr><td><code>HEAD</code></td><td>Can be issued against any resource to get just the HTTP header info.</td></tr><tr><td><code>GET</code></td><td>Used for retrieving resources.</td></tr><tr><td><code>POST</code></td><td>Used for creating resources.</td></tr><tr><td><code>PATCH</code></td><td>Used for updating resources with partial JSON data. For instance, an Issue resource has <code>title</code> and <code>body</code> attributes. A PATCH request may accept one or more of the attributes to update the resource. PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept <code>POST</code> requests.</td></tr><tr><td><code>PUT</code></td><td>Used for replacing resources or collections. For <code>PUT</code> requests with no <code>body</code> attribute, be sure to set the <code>Content-Length</code> header to zero.</td></tr><tr><td><code>DELETE</code></td><td>Used for deleting resources.</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://sofish.github.io/restcookbook/" target="_blank" rel="external">RESTful 手册</a></li><li><a href="http://blog.720ui.com/2016/restful_idempotent/" target="_blank" rel="external">如何理解RESTful的幂等性</a></li><li><a href="https://tools.ietf.org/html/rfc5789" target="_blank" rel="external"><a href="http://tools.ietf.org/html/rfc5789" target="_blank" rel="external">RFC 5789 - HTTP PATCH</a></a></li><li><a href="https://ihower.tw/blog/archives/6483" target="_blank" rel="external">HTTP Verbs: 談 POST, PUT 和 PATCH 的應用</a></li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Restful </tag>
            
            <tag> 手册 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6/ES7参考手册]]></title>
      <url>/2016/12/23/2016/es6/</url>
      <content type="html"><![CDATA[<p>本文档记录学习ECMAScript 6过程中的各个方面内容，包含了一些ES6/7的新语法和一些编码建议，较零散，作参考。</p><a id="more"></a><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">Javascript秘密花园</a></li><li><a href="https://github.com/yuche/javascript" target="_blank" rel="external">Airbnb JavaScript Style</a></li></ul><h2 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h2><h3 id="1-1-使用字面量创建对象"><a href="#1-1-使用字面量创建对象" class="headerlink" title="1.1 使用字面量创建对象"></a>1.1 使用字面量创建对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> item = &#123;&#125;;</div></pre></td></tr></table></figure><h3 id="1-2-对象属性简写"><a href="#1-2-对象属性简写" class="headerlink" title="1.2 对象属性简写"></a>1.2 对象属性简写</h3><blockquote><p>ES6推荐使用对象属性简写，支持对象的属性和方法。</p><p>为什么？因为这样更短更有描述性。</p></blockquote><ul><li>下面代码表明，ES6允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">var</span> baz = &#123;foo&#125;;</div><div class="line">baz <span class="comment">// &#123;foo: "bar"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> baz = &#123;<span class="attr">foo</span>: foo&#125;;</div></pre></td></tr></table></figure><ul><li>方法也可以简写：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad 原始写法</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  value: <span class="number">1</span>,</div><div class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good 简写</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  value: <span class="number">1</span>,</div><div class="line">  addValue(value) &#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>用于返回值时使用简写，特别简洁：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> y = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> &#123;x, y&#125;; <span class="comment">// 这里是简写返回值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">getPoint()</div><div class="line"><span class="comment">// &#123;x:1, y:10&#125;</span></div></pre></td></tr></table></figure><ul><li><strong>在对象属性声明前把简写的属性分组</strong></li></ul><blockquote><p>为什么？因为这样能清楚地看出哪些属性使用了简写。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</div><div class="line"> <span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</div><div class="line"></div><div class="line"> <span class="comment">// bad</span></div><div class="line"> <span class="keyword">const</span> obj = &#123;</div><div class="line">   episodeOne: <span class="number">1</span>,</div><div class="line">   twoJedisWalkIntoACantina: <span class="number">2</span>,</div><div class="line">   lukeSkywalker,</div><div class="line">   episodeThree: <span class="number">3</span>,</div><div class="line">   mayTheFourth: <span class="number">4</span>,</div><div class="line">   anakinSkywalker,</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="comment">// good</span></div><div class="line"> <span class="keyword">const</span> obj = &#123;</div><div class="line">   lukeSkywalker,</div><div class="line">   anakinSkywalker,</div><div class="line">   episodeOne: <span class="number">1</span>,</div><div class="line">   twoJedisWalkIntoACantina: <span class="number">2</span>,</div><div class="line">   episodeThree: <span class="number">3</span>,</div><div class="line">   mayTheFourth: <span class="number">4</span>,</div><div class="line"> &#125;;</div></pre></td></tr></table></figure><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h2><h3 id="2-1-使用字面量创建数组"><a href="#2-1-使用字面量创建数组" class="headerlink" title="2.1 使用字面量创建数组"></a>2.1 使用字面量创建数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> items = [];</div></pre></td></tr></table></figure><h3 id="2-2-使用push代替直接赋值"><a href="#2-2-使用push代替直接赋值" class="headerlink" title="2.2 使用push代替直接赋值"></a>2.2 使用push代替直接赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> someStack = [];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div></pre></td></tr></table></figure><h3 id="2-3-使用使用拓展运算符-复制数组。"><a href="#2-3-使用使用拓展运算符-复制数组。" class="headerlink" title="2.3 使用使用拓展运算符 ... 复制数组。"></a>2.3 使用使用拓展运算符 <code>...</code> 复制数组。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> len = items.length;</div><div class="line"><span class="keyword">const</span> itemsCopy = [];</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure><p>###　2.4 使用 Array#from 把一个类数组对象转换成数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</div><div class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</div></pre></td></tr></table></figure><h3 id="2-5-对象解构赋值"><a href="#2-5-对象解构赋值" class="headerlink" title="2.5 对象解构赋值"></a>2.5 对象解构赋值</h3><ul><li>数组可以</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line">a <span class="comment">// 1</span></div><div class="line">b <span class="comment">// 2</span></div><div class="line">d <span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// 解构的默认值</span></div><div class="line">[x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line">[x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line">[x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">null</span>]; <span class="comment">// x='a', y=null</span></div></pre></td></tr></table></figure><ul><li>对象可以</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">foo <span class="comment">// "aaa"</span></div><div class="line">bar <span class="comment">// "bbb"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 如果变量名不一致，需要指定别名</span></div><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</div><div class="line">f <span class="comment">// 'hello'</span></div><div class="line">l <span class="comment">// 'world'</span></div><div class="line">first <span class="comment">// error: foo is not defined</span></div><div class="line"></div><div class="line"><span class="comment">// 解构的默认值</span></div><div class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 5</span></div></pre></td></tr></table></figure><blockquote><p>注意，对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值</p></blockquote><p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。如果解构不成功，变量的值就等于<code>undefined</code>。</p><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h2><h3 id="3-1-使用单引号-39-39"><a href="#3-1-使用单引号-39-39" class="headerlink" title="3.1 使用单引号&#39;&#39;"></a>3.1 使用单引号<code>&#39;&#39;</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure><h3 id="3-2-使用模板连接字符串"><a href="#3-2-使用模板连接字符串" class="headerlink" title="3.2 使用模板连接字符串"></a>3.2 使用模板连接字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="string">`<span class="subst">$&#123;name&#125;</span> is a man`</span> <span class="comment">// good 字符串模板优先</span></div><div class="line">[<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join() <span class="comment">// bad 其次是join</span></div><div class="line"><span class="string">'How are you, '</span> + name + <span class="string">'?'</span> <span class="comment">// bad 最后才是连接符</span></div></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1-函数声明优先"><a href="#4-1-函数声明优先" class="headerlink" title="4.1 函数声明优先"></a>4.1 函数声明优先</h3><blockquote><p>为什么？因为函数声明是可命名的，所以他们在调用栈中更容易被识别。此外，函数声明会把整个函数提升（hoisted），而函数表达式只会把函数的引用变量名提升。这条规则使得<a href="https://github.com/yuche/javascript#arrow-functions" target="_blank" rel="external">箭头函数</a>可以取代函数表达式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="4-2-函数参数"><a href="#4-2-函数参数" class="headerlink" title="4.2 函数参数"></a>4.2 函数参数</h3><p>直接给函数的参数指定默认值，不要使用一个变化的函数参数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// really bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="comment">// 不！我们不应该改变函数参数。</span></div><div class="line">  <span class="comment">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span></div><div class="line">  <span class="comment">// 但这样的写法会造成一些 Bugs。</span></div><div class="line">  <span class="comment">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span></div><div class="line">  opts = opts || &#123;&#125;;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// still bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    opts = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>推荐，如果有多个参数，请使用参数对象包装，这样在增加参数的时候，不需要改变函数声明。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="4-3-箭头函数"><a href="#4-3-箭头函数" class="headerlink" title="4.3 箭头函数"></a>4.3 箭头函数</h3><ul><li>当你必须使用函数表达式（或传递一个匿名函数）时，使用箭头函数符号。</li></ul><blockquote><p>为什么?因为箭头函数创造了新的一个 <code>this</code> 执行环境（译注：参考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow functions - JavaScript | MDN</a> 和 <a href="http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/" target="_blank" rel="external">ES6 arrow functions, syntax and lexical scoping</a>），通常情况下都能满足你的需求，而且这样的写法更为简洁。</p><p>为什么不？如果你有一个相当复杂的函数，你或许可以把逻辑部分转移到一个函数声明上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>如果一个函数适合用一行写出并且只有一个参数，那就把花括号、圆括号和 <code>return</code> 都省略掉。如果不是，那就不要省略。</li></ul><blockquote><p>为什么？语法糖。在链式调用中可读性很高。</p><p>为什么不？当你打算回传一个对象的时候。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line">  <span class="comment">// good</span></div><div class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">total, n</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> total + n;</div><div class="line">  &#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure><h3 id="4-4-函数参数默认值"><a href="#4-4-函数参数默认值" class="headerlink" title="4.4 函数参数默认值"></a>4.4 函数参数默认值</h3><p>在4.2中知道，函数的参数现在允许使用默认值了，写法就是<code>(a = value)</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">'China'</span>) <span class="comment">// Hello China</span></div><div class="line">log(<span class="string">'Hello'</span>, <span class="string">''</span>) <span class="comment">// Hello</span></div></pre></td></tr></table></figure><blockquote><p>注意，参数的默认值顺序，最好写在末尾参数，即使非末尾参数指定了默认值，在使用时也不能省略该参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = <span class="number">1</span>, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">f() <span class="comment">// [1, undefined]</span></div><div class="line">f(<span class="number">2</span>) <span class="comment">// [2, undefined])</span></div><div class="line">f(, <span class="number">1</span>) <span class="comment">// 报错</span></div><div class="line">f(<span class="literal">undefined</span>, <span class="number">1</span>) <span class="comment">// [1, 1]/// 注意这里，和null的区别</span></div><div class="line">f(<span class="literal">null</span>, <span class="number">1</span>) <span class="comment">// [null, 1] /// 注意这里，和undefined的区别</span></div></pre></td></tr></table></figure><p>如果非尾参数指定了默认值，除非显示的传入<code>undefined</code>，否则将无法触发参数的默认值。<code>null</code> 值则仍未null值。</p><blockquote><p>注意，如果给参数指定了默认值，函数的length属性则为预期需要传入的参数个数，如果非尾参数，则会忽略计算后面的参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a=<span class="number">1</span>, b, c</span>) </span>&#123;&#125;).length <span class="comment">// 0</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b=<span class="number">1</span>, c</span>) </span>&#123;&#125;).length <span class="comment">// 1</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a, b, c=<span class="number">5</span></span>) </span>&#123;&#125;).length <span class="comment">// 2</span></div></pre></td></tr></table></figure><h3 id="4-5-函数参数的解构赋值"><a href="#4-5-函数参数的解构赋值" class="headerlink" title="4.5 函数参数的解构赋值"></a>4.5 函数参数的解构赋值</h3><p>在之前的章节中，介绍了对象的解构赋值，同样，函数的参数（包括构造函数）也可以解构。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(&#123;&#125;) <span class="comment">// undefined, 5</span></div><div class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;) <span class="comment">// 1, 5</span></div><div class="line">foo(&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;) <span class="comment">// 1, 2</span></div><div class="line">foo() <span class="comment">// TypeError: Cannot read property 'x' of undefined</span></div></pre></td></tr></table></figure><p>利用这个特性，我们可以写出非常简洁的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 这是通用返回结构</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(&#123; data, code = <span class="number">200</span>, message = <span class="string">'执行成功'</span> &#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.code = code;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">    <span class="keyword">if</span>(!!data) &#123; <span class="comment">// null值将被忽略</span></div><div class="line">      <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> ok(data) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(&#123; data &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> error(code, message) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result( &#123; code, message &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// success时返回</span></div><div class="line"><span class="keyword">const</span> data = &#123;<span class="attr">user</span>: <span class="string">'abc'</span>&#125;;</div><div class="line"><span class="keyword">const</span> result = Result.ok(data);</div><div class="line">ctx.body = result; </div><div class="line"></div><div class="line"><span class="comment">// error时返回</span></div><div class="line"><span class="keyword">const</span> result = Result.error(<span class="number">401</span>, <span class="string">'Unauthorized'</span>);</div><div class="line">ctx.body = result;</div></pre></td></tr></table></figure><h2 id="5-模块"><a href="#5-模块" class="headerlink" title="5.模块"></a>5.模块</h2><h3 id="5-1-总是使用import-export"><a href="#5-1-总是使用import-export" class="headerlink" title="5.1 总是使用import/export"></a>5.1 总是使用<code>import/export</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</div></pre></td></tr></table></figure><h3 id="5-2-不要使用import通配符"><a href="#5-2-不要使用import通配符" class="headerlink" title="5.2 不要使用import通配符"></a>5.2 不要使用import通配符</h3><blockquote><p>Why? This makes sure you have a single default export.</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</div></pre></td></tr></table></figure><h3 id="5-3-不要导出可变的对象"><a href="#5-3-不要导出可变的对象" class="headerlink" title="5.3 不要导出可变的对象"></a>5.3 不要导出可变的对象</h3><blockquote><p>Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.</p><p>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="external"><code>import/no-mutable-exports</code></a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">  <span class="keyword">let</span> foo = <span class="number">3</span>;</div><div class="line">  <span class="keyword">export</span> &#123; foo &#125;</div><div class="line"></div><div class="line">  <span class="comment">// good</span></div><div class="line">  <span class="keyword">const</span> foo = <span class="number">3</span>;</div><div class="line">  <span class="keyword">export</span> &#123; foo &#125;</div></pre></td></tr></table></figure><h3 id="5-4-如果只有一个导出，使用default"><a href="#5-4-如果只有一个导出，使用default" class="headerlink" title="5.4 如果只有一个导出，使用default."></a>5.4 如果只有一个导出，使用default.</h3><blockquote><p>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="external"><code>import/prefer-default-export</code></a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure><h2 id="6-并发"><a href="#6-并发" class="headerlink" title="6.并发"></a>6.并发</h2><h3 id="6-1-async-and-await"><a href="#6-1-async-and-await" class="headerlink" title="6.1 async and await"></a>6.1 async and await</h3><p>下面的代码是koa2中的router filter，我们利用async和await，以及Promise，同时执行了两个数据库查询，等待执行完毕后，返回结果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// User.findById 和Channel.findOne将被同时触发</span></div><div class="line"><span class="keyword">async</span> me(ctx, next) &#123;</div><div class="line">    <span class="keyword">const</span> _me = ctx.state.user; </div><div class="line">    <span class="keyword">const</span>[user, channel] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([User.findById(_me.id), Channel.findOne()]);</div><div class="line">    ctx.body = &#123;</div><div class="line">      user,</div><div class="line">      channel,</div><div class="line">    &#125;;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><hr><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><p>使用eslint: eslint-config-airbnb-base</p><h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h3><ul><li><p>行首逗号：<strong>不需要</strong>。eslint: <a href="http://eslint.org/docs/rules/comma-style.html" target="_blank" rel="external"><code>comma-style</code></a> jscs: <a href="http://jscs.info/rule/requireCommaBeforeLineBreak" target="_blank" rel="external"><code>requireCommaBeforeLineBreak</code></a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> story = [</div><div class="line">    once</div><div class="line">  , upon</div><div class="line">  , aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> story = [</div><div class="line">  once,</div><div class="line">  upon,</div><div class="line">  aTime,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> hero = &#123;</div><div class="line">    firstName: <span class="string">'Ada'</span></div><div class="line">  , <span class="attr">lastName</span>: <span class="string">'Lovelace'</span></div><div class="line">  , <span class="attr">birthYear</span>: <span class="number">1815</span></div><div class="line">  , <span class="attr">superPower</span>: <span class="string">'computers'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> hero = &#123;</div><div class="line">  firstName: <span class="string">'Ada'</span>,</div><div class="line">  lastName: <span class="string">'Lovelace'</span>,</div><div class="line">  birthYear: <span class="number">1815</span>,</div><div class="line">  superPower: <span class="string">'computers'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>增加结尾的逗号: <strong>需要</strong>。</p><blockquote><p>为什么? 这会让 git diffs 更干净。另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的<a href="https://github.com/yuche/javascript/blob/master/es5/README.md#commas" target="_blank" rel="external">尾逗号问题</a>。</p><p>eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="external"><code>comma-dangle</code></a> jscs: <a href="http://jscs.info/rule/requireTrailingComma" target="_blank" rel="external"><code>requireTrailingComma</code></a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad - git diff without trailing comma</span></div><div class="line"><span class="keyword">const</span> hero = &#123;</div><div class="line">     firstName: <span class="string">'Florence'</span>,</div><div class="line">-    lastName: <span class="string">'Nightingale'</span></div><div class="line">+    lastName: <span class="string">'Nightingale'</span>,</div><div class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good - git diff with trailing comma</span></div><div class="line"><span class="keyword">const</span> hero = &#123;</div><div class="line">     firstName: <span class="string">'Florence'</span>,</div><div class="line">     lastName: <span class="string">'Nightingale'</span>,</div><div class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p><strong>使用分号</strong></p><blockquote><p>eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="external"><code>semi</code></a> jscs: <a href="http://jscs.info/rule/requireSemicolons" target="_blank" rel="external"><code>requireSemicolons</code></a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span></div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数)</span></div><div class="line">;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>示例：.babelrc</p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"flow-vue"</span>],</div><div class="line">  <span class="attr">"ignore"</span>: [</div><div class="line">    <span class="string">"dist/*.js"</span>,</div><div class="line">    <span class="string">"packages/**/*.js"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p><code>presets</code>字段设定转码规则，官方提供以下的规则集<a href="http://babeljs.cn/docs/plugins/#presets" target="_blank" rel="external">presets</a></p><p>关于ES7不同阶段的提案， stage-0 &gt; stage-1 &gt; stage-2 &gt; stage-3</p></blockquote><p>参考：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="external">Babel 入门教程</a></li><li><a href="https://github.com/hehongwei44/babel-hankbook" target="_blank" rel="external">babel-hankbook</a></li></ul>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 手册 </tag>
            
            <tag> es6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css-keyframes-animation]]></title>
      <url>/2016/12/20/2016/css-keyframes-animation/</url>
      <content type="html"><![CDATA[<p>大家好，今天给大家介绍一下@keyframes的用法。</p><p>— 好像并没有人 —</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><code>@keyframes</code> 让开发者通过指定动画中特定时间点必须展现的关键帧样式（或者说停留点）来控制CSS动画的中间环节。这让开发者能够控制动画中的更多细节而不是全部让浏览器自动处理。</p><p>要使用关键帧, 先创建一个带名称的<code>@keyframes</code>规则，以便后续使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-name" target="_blank" rel="external"><code>animation-name</code></a> 这个属性来调用指定的<code>@keyframes</code>. 每个<code>@keyframes</code> 规则包含多个关键帧，也就是一段样式块语句，每个关键帧有一个百分比值作为名称，代表在动画进行中，在哪个阶段触发这个帧所包含的样式。</p><p>关键帧的编写顺序没有要求，最后只会根据百分比按由小到大的顺序触发。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先定义@keyframes，这里有俩</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> scale-in-ease &#123;</div><div class="line">  0% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0)</div><div class="line">  &#125;</div><div class="line">  50% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1.1)</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> scale-out &#123;</div><div class="line">  <span class="selector-tag">from</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(1)</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">to</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(.8)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在使用的地方，通过关键字animation引用：</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">scale-out</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.22</span>,<span class="selector-class">.58</span>,<span class="selector-class">.12</span>,<span class="selector-class">.98</span>) <span class="selector-class">.4s</span>;</div><div class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">scale-in-ease</span> <span class="selector-tag">cubic-bezier</span>(<span class="selector-class">.22</span>,<span class="selector-class">.58</span>,<span class="selector-class">.12</span>,<span class="selector-class">.98</span>) <span class="selector-class">.5s</span>;</div></pre></td></tr></table></figure><p>未完待续</p><h2 id="人生经验"><a href="#人生经验" class="headerlink" title="人生经验"></a>人生经验</h2><ul><li><h3 id="让关键帧序列生效"><a href="#让关键帧序列生效" class="headerlink" title="让关键帧序列生效"></a>让关键帧序列生效</h3><p>为了让一个关键帧列表有效，它必须至少包含了对0%（或from）和100%（或to）即动画的开头帧和结束帧的定义。 如果都没有进行定义，那么整个@keyframes 是无效的，不能使用。</p><p>如果在关键帧的样式中使用了不能用作动画的属性，那么这些属性会被忽略掉，支持动画的属性仍然是有效的，不受波及。</p></li><li><h3 id="重复定义（Duplicate-resolution）"><a href="#重复定义（Duplicate-resolution）" class="headerlink" title="重复定义（Duplicate resolution）"></a>重复定义（Duplicate resolution）</h3><p>如果多个关键帧使用同一个名称，以最后一次定义的为准。 <code>@keyframes</code> 不存在层叠样式(cascade)的情况，所以动画在一个时刻（阶段）只会使用一个的关键帧的数据。</p><p>如果一个@keyframes 里的关键帧的百分比存在重复的情况，以最后一次定义的关键帧为准。 因为<code>@keyframes</code> 的规则不存在层叠样式(cascade)的情况，即使多个关键帧设置相同的百分值也不会全部执行。</p></li><li><h3 id="属性个数不定"><a href="#属性个数不定" class="headerlink" title="属性个数不定"></a>属性个数不定</h3><p>如果一个关键帧中没有出现其他关键帧中的属性，那么这个属性将使用插值(不能使用插值的属性除外, 这些属性会被忽略掉)。例如：</p></li></ul><pre><code>@keyframes identifier {
  0% { top: 0; left: 0; }
  30% { top: 50px; }
  68%, 72% { left: 50px; }
  100% { top: 100px; left: 100%; }
}
</code></pre><ul><li><h3 id="关键帧中的-important-关键词将被忽略"><a href="#关键帧中的-important-关键词将被忽略" class="headerlink" title="关键帧中的 !important 关键词将被忽略"></a>关键帧中的 !important 关键词将被忽略</h3><p>啊哈</p></li><li><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> &lt;identifier&gt; &#123;</div><div class="line"><span class="selector-attr">[ [ from | to | &lt;百分比&gt; ]</span> <span class="selector-attr">[, from | to | &lt;百分比&gt; ]</span>* <span class="selector-tag">block</span> ]*</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><identifier><br>帧列表的名称。 名称必须符合 CSS 语法中对标识符的定义。<br>from<br>等效于 0%.<br>to<br>等效于 100%.<br><percentage><br>动画序列中，触发关键帧的时间点，使用百分值来表示。</percentage></identifier></p><h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><p><img src="image1.png" alt="image1"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@keyframes" target="_blank" rel="external">CSS3中的关键帧</a></li><li><a href="http://www.w3school.com.cn/cssref/pr_keyframes.asp" target="_blank" rel="external">CSS3 @keyframes 规则</a></li></ul>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决包含img的div底部多出了3px]]></title>
      <url>/2016/12/20/2016/div-img-3px/</url>
      <content type="html"><![CDATA[<h2 id="先说现象"><a href="#先说现象" class="headerlink" title="先说现象"></a>先说现象</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span> <span class="attr">style</span>=<span class="string">"background-color:#f00;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://p1.bpimg.com/567571/578c5c39b2f1e41f.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></div><div class="line">  ...代表</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p>上面的示例代码，会让<code>top</code>出现3px的<code>margin-bottom</code> ，就是这么吊。</p><p>其中&lt;!DOCTYPE HTML&gt;是必须滴。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>A.给img设置display: block</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>B.给img设置vertical-align</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">vertical-align</span>: top/middle/...;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>C.给img他爸爸设置font-size: 0</p><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-class">.top</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>D. …</p><p>上面测试都通过，想知道为什么？。</p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>据传说，这是浏览器在给y.g这种腿长的字母预留的空间，大概…就是3px，可能是因为img长的太像它们了，所以也给了3px。</p><blockquote><p>This problem is caused by the image behaving like a character of text (and so leaving a space below it where the hanging part of a “y” or “g” would go), and is solved by using the <code>vertical-align</code> CSS property to indicate that no such space is needed. Almost any value of <code>vertical-align</code> will do; I’m fond of <code>middle</code>, personally.</p><p>The problem is caused by <code>vertical-align: baseline</code>, which is the default for most elements and indicates that that space should be reserved. Some of the other legal values for <code>vertical-align</code> also reserve this space, but <code>top</code>, <code>text-top</code>, <code>middle</code>, <code>bottom</code> and <code>text-bottom</code> do not. <code>sub</code> also doesn’t appear to, but I’m leery of trusting that one. – <a href="http://stackoverflow.com/users/638544/brilliand" target="_blank" rel="external">Brilliand</a> <a href="http://stackoverflow.com/questions/10844205/html-5-strange-img-always-adds-3px-margin-at-bottom/10844318#comment14122249_10844318" target="_blank" rel="external">Jun 1 ‘12 at 4:20</a></p></blockquote><p>参考：</p><ul><li><a href="http://lab.yqc.im/css-img-div-3px.html" target="_blank" rel="external">http://lab.yqc.im/css-img-div-3px.html</a></li><li><a href="http://stackoverflow.com/questions/10844205/html-5-strange-img-always-adds-3px-margin-at-bottom/10844318" target="_blank" rel="external">http://stackoverflow.com/questions/10844205/html-5-strange-img-always-adds-3px-margin-at-bottom/10844318</a></li></ul>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
            <tag> 坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue-element入坑体验]]></title>
      <url>/2016/12/14/2016/vue-element/</url>
      <content type="html"><![CDATA[<p>最近做了一个基于Vue2.x的实践，之前觉得element-ui项目不错，所以就拿来使用了，中间出现了一些坑，统一在这里说一下体验吧。</p><a id="more"></a><h5 id="1-【解决】Table带checkbox-Cannot-read-property-‘value’-of-undefined"><a href="#1-【解决】Table带checkbox-Cannot-read-property-‘value’-of-undefined" class="headerlink" title="1. 【解决】Table带checkbox Cannot read property ‘value’ of undefined"></a>1. 【解决】Table带checkbox Cannot read property ‘value’ of undefined</h5><p>官网例子Table带checkbox。Chrome下面出现此问题。IE没有。</p><p>三个页面，一个页面含有上述组件，另外两个没有，使用了vue-router，在切换的时候出现此问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">store: <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._checkboxGroup.value; <span class="comment">// 这里undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>解决方式：</p><p>把路由改为懒加载模式，就好了。因为这样的话，一个页面不会去加载其他页面的js，肯定没有问题。至于为什么会出现这个BUG，还不太清楚。</p><p>懒加载示例如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">routes: [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../App'</span>], resolve) &#125;,</div><div class="line">]</div></pre></td></tr></table></figure><p>参考：<a href="https://github.com/ElemeFE/element/issues/1717" target="_blank" rel="external">https://github.com/ElemeFE/element/issues/1717</a></p><h5 id="2-【解决】element-ui-vm-h-is-not-a-function"><a href="#2-【解决】element-ui-vm-h-is-not-a-function" class="headerlink" title="2. 【解决】element ui _vm._h is not a function"></a>2. 【解决】element ui _vm._h is not a function</h5><p>这个问题出现的吊就吊在，第一天没问题，上传到git，第二天clone下来再运行就挂了。让人一度怀疑人生。这个问题在github issues上给出了解决方式。</p><blockquote><p>解决方式：</p><p>Vue 2.1.5 将 <code>_h</code> 重命名为 <code>_c</code>，而 Element 目前发的版本都是用以前的 compiler 编译的，导致新版 runtime 无法运行 Element。目前的解决方案是锁定 Vue 的版本为 2.1.4</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><div class="line"># 重新安装一下版本</div><div class="line">  "vue-template-compiler": "2.1.4"</div><div class="line">  "vue-loader": "10.0.0"</div><div class="line">  "vue": "2.1.4"</div></pre></td></tr></table></figure><p>参考：</p><ul><li><p><a href="https://github.com/ElemeFE/element/issues/1706" target="_blank" rel="external">2016.12.13 再次 _vm._h is not a function</a></p></li><li><p><a href="https://segmentfault.com/a/1190000007787134" target="_blank" rel="external">element框架搭建</a></p><p>​</p></li></ul>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL修改字符集编码为utf8mb4支持emoji存储]]></title>
      <url>/2016/12/08/2016/mysql-utf8mb4-emoji/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>MySQL 5.5.3+</li><li>JDBC驱动5.1.14+</li></ul><h2 id="关于utf8mb4编码"><a href="#关于utf8mb4编码" class="headerlink" title="关于utf8mb4编码"></a>关于utf8mb4编码</h2><p>MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8bp4外不需要做其他转换。</p><p>三个字节的 UTF-8 最大能编码的 Unicode 字符是 0xffff，也就是 Unicode 中的基本多文种平面（BMP）。也就是说，任何不在基本多文本平面的 Unicode字符，都无法使用 Mysql 的 utf8 字符集存储。包括 <a href="http://my.oschina.net/wingyiu/blog/153357" target="_blank" rel="external">Emoji 表情</a>（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android 手机上），和很多不常用的汉字，以及任何新增的 Unicode 字符等等。</p><p>由于utf8 编码最大字符长度为 3 字节，如果遇到 4 字节的宽字符就会插入异常了:</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Caused by: java.sql.SQLException: Incorrect string value: &apos;\xF0\x9F\x98\x97\xF0\x9F...&apos; for column &apos;CONTENT&apos; at row 1</div></pre></td></tr></table></figure><p>对应的解决方案就是修改字符编码为utf8mb4.</p><hr><p>划重点</p><hr><h3 id="修改数据库表结构-必须"><a href="#修改数据库表结构-必须" class="headerlink" title="修改数据库表结构(必须)"></a>修改数据库表结构(必须)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">--修改数据库字符集</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">test</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</div><div class="line"><span class="comment">--修改表字符集</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">test</span> <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8mb4;</div><div class="line"><span class="comment">--修改字符字符集</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`test`</span> <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> <span class="string">`name`</span> <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</div></pre></td></tr></table></figure><h3 id="修改Mysql配置文件my-ini（必须）"><a href="#修改Mysql配置文件my-ini（必须）" class="headerlink" title="修改Mysql配置文件my.ini（必须）"></a>修改Mysql配置文件my.ini（必须）</h3><p>根据版本不同，可能并非所有配置项都存在，只需要修改存在的即可。修改后重启MySQL</p><figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="attr">default-character-set</span> = utf8mb4</div><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">character-set-server</span>=utf8mb4</div><div class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci</div><div class="line"><span class="section">[mysql]</span></div><div class="line"><span class="attr">default-character-set</span> = utf8mb4</div></pre></td></tr></table></figure><p>如果你使用的是java语言，需要将jdbc驱动包升级到 mysql-connector-java-5.1.14.jar。</p><hr><p>全剧终。</p><hr><h2 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h2><h3 id="关于异常Specified-key-was-too-long"><a href="#关于异常Specified-key-was-too-long" class="headerlink" title="关于异常Specified key was too long"></a>关于异常Specified key was too long</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alter table m_reply convert to character set utf8mb4	Error Code: 1071. Specified key was too long; max key length is 767 bytes</div></pre></td></tr></table></figure><p>在修改表字符集时，可能会遇到上面的异常，解决方式就是，把长度大于768/4=192的索引改小。</p><p>报错原因在于：MySQL Innodb 的索引长度限制为 767 字节，UTF8mb4 字符集是 4 个字节，<br><strong>767 字节 / 4 字节每字符 = 191 字符（即默认的索引最大长度）</strong><br>因此在 varchar(255) 类型字段上，创建索引会失败，提示最大索引长度为767字节。具体请google。</p><p>PS：在5.7版本未出现上述问题。</p><h3 id="utf8mb4-unicode-ci-还是-utf8mb4-general-ci"><a href="#utf8mb4-unicode-ci-还是-utf8mb4-general-ci" class="headerlink" title="utf8mb4_unicode_ci 还是 utf8mb4_general_ci"></a>utf8mb4_unicode_ci 还是 utf8mb4_general_ci</h3><p>在性能方面考虑，utf8mb4_unicode_ci 。具体请google。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://my.oschina.net/leejun2005/blog/343353" target="_blank" rel="external">关于 MySQL UTF8 编码下生僻字符插入失败/假死问题的分析</a></li><li><a href="https://my.oschina.net/leejun2005/blog/232732#OSC_h3_4" target="_blank" rel="external">谈谈字符集与字符编码</a></li><li><a href="https://ruby-china.org/topics/24693" target="_blank" rel="external">阿里云 Rails 项目调整 RDS MySQL 编码为 utf8mb4 的详细步骤</a></li></ul>]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 编码 </tag>
            
            <tag> emoji </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于oltu的oauth2 server]]></title>
      <url>/2016/12/06/2016/OAuth2%20Server%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li>OAuth2 略</li><li>oltu 参加官方介绍<a href="http://oltu.apache.org/" target="_blank" rel="external">http://oltu.apache.org/</a><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2></li></ul><p>主框架使用<code>Spring + Spring Security</code> 搭建。因为遗留的项目采用了低版本的<code>Spring 3.0.x</code>,所以放弃了<code>Spring</code>提供的<code>spring-security-oauth2</code>。<code>spring-security-oauth2</code>官网提供的例子也像一坨屎，无法让人信服。</p><p>由于Client端的实现较为简单且多样，所以本文主要介绍Authorization Server的实现方式。以authorization_code模式为例</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>authorize</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/authorize"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">authorize</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//构建OAuth请求</span></div><div class="line">        OAuthAuthzRequest oauthRequest = <span class="keyword">new</span> OAuthAuthzRequest(request);</div><div class="line">        String responseType = oauthRequest.getParam(OAuth.OAUTH_RESPONSE_TYPE);</div><div class="line">        <span class="keyword">if</span> (!ResponseType.CODE.toString().equals(responseType)) &#123;</div><div class="line">            <span class="keyword">throw</span> OAuthProblemException.error(<span class="string">"response_type不正确"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String clientId = oauthRequest.getClientId();</div><div class="line">        <span class="comment">// 验证clientId是否正确</span></div><div class="line">        <span class="keyword">if</span> (!validateOAuth2ClientId(clientId)) &#123;</div><div class="line">         	<span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String redirectURI = oauthRequest.getRedirectURI();</div><div class="line">        <span class="comment">// 验证redirectURI</span></div><div class="line">        <span class="keyword">if</span> (!validateRedirectUri(redirectURI)) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 查询app信息</span></div><div class="line">        String appName = getAppInfo();</div><div class="line">        </div><div class="line">        <span class="comment">// 用户是否登录</span></div><div class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class="line">   		String code = <span class="keyword">new</span> OAuthIssuerImpl(<span class="keyword">new</span> MD5Generator()).authorizationCode();</div><div class="line">      	OAuthResponse oauthResponse = OAuthASResponse</div><div class="line">                    .authorizationResponse(request, HttpServletResponse.SC_FOUND)</div><div class="line">                    .setCode(code)</div><div class="line">                    .location(redirectURI)</div><div class="line">                    .buildQueryMessage();</div><div class="line">      	<span class="keyword">return</span> <span class="string">"redirect:"</span> + oauthResponse.getLocationUri();</div><div class="line">    &#125; <span class="keyword">catch</span> (OAuthProblemException ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">        model.addAttribute(<span class="string">"message"</span>, ex.getDescription());</div><div class="line">    &#125; <span class="keyword">catch</span> (OAuthSystemException e) &#123;</div><div class="line">        model.addAttribute(<span class="string">"message"</span>, e.getMessage());</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">"site/500"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>access_token</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> ResponseEntity&lt;?&gt; accessToken(HttpServletRequest request) &#123;</div><div class="line">    <span class="comment">//构建oauth2请求</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        OAuthTokenRequest oauthRequest = <span class="keyword">new</span> OAuthTokenRequest(request);</div><div class="line"></div><div class="line">        <span class="comment">// TODO 校验appInfo</span></div><div class="line">        String clientId = oauthRequest.getClientId();</div><div class="line">        <span class="keyword">if</span> (!validateOAuth2ClientId(clientId)) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String clientSecret = oauthRequest.getClientSecret();</div><div class="line">        <span class="keyword">if</span> (!validateOauth2ClientSecret(clientSecret)) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String grantType = oauthRequest.getGrantType();</div><div class="line">        <span class="keyword">if</span> (!validateOauth2GrantType(grantType)) &#123;</div><div class="line">           <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String code = oauthRequest.getCode();</div><div class="line">        String openId = oAuth2Service.getOpenId(code);</div><div class="line">        <span class="keyword">if</span> (openId == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 生成AccessToken</span></div><div class="line">        OAuthIssuerImpl oAuthIssuer = <span class="keyword">new</span> OAuthIssuerImpl(<span class="keyword">new</span> MD5Generator());</div><div class="line">        String accessToken = oAuthIssuer.accessToken();</div><div class="line">        oAuth2Service.addAccessToken(accessToken, openId);</div><div class="line">        oAuth2Service.evict(code);</div><div class="line">         <span class="comment">//生成OAuth响应</span></div><div class="line">         OAuthResponse response = OAuthASResponse</div><div class="line">                 .tokenResponse(HttpServletResponse.SC_OK)</div><div class="line">                 .setAccessToken(accessToken)</div><div class="line">                 .setParam(<span class="string">"openId"</span>, openId)</div><div class="line">                 .setExpiresIn(String.valueOf(oAuth2Service.getExpireIn()))</div><div class="line">                 .buildJSONMessage();</div><div class="line">         <span class="keyword">return</span> ResponseEntity.ok(response.getBody());</div><div class="line">     &#125;  <span class="keyword">catch</span> (OAuthProblemException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">         <span class="keyword">return</span> ResponseEntity.badRequest().body(e.getDescription());</div><div class="line">     &#125; <span class="keyword">catch</span> (OAuthSystemException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> ResponseEntity.badRequest().body(<span class="string">"未知错误"</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>完整示例请参考开源项目：<a href="https://github.com/microacup/microbbs" target="_blank" rel="external">microbbs</a></p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul><li><a href="http://oltu.apache.org/" target="_blank" rel="external">http://oltu.apache.org/</a></li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> OAuth2 </tag>
            
            <tag> oltu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Thymeleaf User Details]]></title>
      <url>/2016/11/21/2016/Spring-Thymeleaf-User-Details/</url>
      <content type="html"><![CDATA[<p>1、继承User或实现<code>Spring org.springframework.security.core.userdetails.UserDetails</code></p><p>2、UserService 实现<code>org.springframework.security.core.userdetails.UserDetailsService</code></p><p>3、设置WebSecurityConfig</p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.eraseCredentials(<span class="keyword">true</span>)</div><div class="line">                .userDetailsService(userService())</div><div class="line">                ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserService();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>服务端完工。</p><p>在html中，使用principal</p><p>例如访问用户昵称字段：<code>&lt;span sec:authentication=&quot;principal.nick&quot;&gt;Bob&lt;/span&gt;</code></p><p>参考资料：</p><ul><li><a href="http://stackoverflow.com/questions/29758675/spring-security-3-2-7-how-to-access-user-details-by-thymelea" target="_blank" rel="external">You could create a custom user that extends spring user</a></li></ul>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Tymeleaf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Koa2 使用swig模板引擎注意事项]]></title>
      <url>/2016/05/20/2016/Koa2%20%E4%BD%BF%E7%94%A8swig%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p><code>koa</code>使用<code>swig</code>有多种插件，目前我测试了两款：<code>koa-swig</code> 和<code>co-views</code>. 其中<code>co-views</code>是在官方的文档中看到的，<code>koa-swig</code>是在github中找到的。</p><a id="more"></a><p>安装方式，使用<code>npm install name</code>即可。</p><p>关于路由：</p><p>如果想把路由分多个文件，例如api.router.js、web.router.js，可以使用Router的参数prefix指定。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)(&#123;</div><div class="line">	prefix: <span class="string">'/api'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> *(<span class="params">next</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.body = <span class="string">'this a api response!'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>在api.js中，声明路由时，不要使用koa-generator生成的express风格的路由引用，因为路由前缀已经在路由定义中指定了，否则会404.这么写就可以了：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// routes definition</span></div><div class="line">koa.use(api.routes(), api.allowedMethods());</div><div class="line">koa.use(index.routes(), index.allowedMethods());</div><div class="line"></div><div class="line"><span class="comment">// mount root routes  </span></div><div class="line">app.use(koa.routes());</div></pre></td></tr></table></figure><h2 id="1-co-views"><a href="#1-co-views" class="headerlink" title="1. co-views"></a>1. co-views</h2><h3 id="在根目录下新建lib-render-js文件"><a href="#在根目录下新建lib-render-js文件" class="headerlink" title="在根目录下新建lib/render.js文件"></a>在根目录下新建lib/render.js文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Module dependencies.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> views = <span class="built_in">require</span>(<span class="string">'co-views'</span>);</div><div class="line"></div><div class="line"><span class="comment">// setup views mapping .html</span></div><div class="line"><span class="comment">// to the swig template engine</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = views(__dirname + <span class="string">'/../views'</span>, &#123;</div><div class="line">  map: &#123; <span class="attr">html</span>: <span class="string">'swig'</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="在app中设置render"><a href="#在app中设置render" class="headerlink" title="在app中设置render"></a>在app中设置render</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">const render = require(&apos;./lib/render&apos;);</div><div class="line">app.context.render = render;</div></pre></td></tr></table></figure><h3 id="在路由中使用"><a href="#在路由中使用" class="headerlink" title="在路由中使用"></a>在路由中使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var router = require(&apos;koa-router&apos;)();</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, async function (ctx, next) &#123;</div><div class="line">  cxt.body = await ctx.render(&apos;index&apos;, &#123;</div><div class="line">    title: &apos;Hello&apos;</div><div class="line">  &#125;;);</div><div class="line">&#125;)</div><div class="line">module.exports = router;</div></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ol><li><code>co-views</code> 2.1.0版本中，必须手动指定<code>cxt.body=</code> 否则页面会not found.</li><li><code>ctx.render(&#39;page&#39;, settings)</code>，页面模型数据必须通过<code>settings</code>传入，不能使用<code>ctx.state</code></li></ol></blockquote><h2 id="2-koa-swig"><a href="#2-koa-swig" class="headerlink" title="2. koa-swig"></a>2. koa-swig</h2><h3 id="在app中设置render-1"><a href="#在app中设置render-1" class="headerlink" title="在app中设置render"></a>在app中设置render</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">const render = require(&apos;koa-swig&apos;);</div><div class="line">const co = require(&apos;co&apos;);</div><div class="line">app.context.render = co.wrap(render(&#123;</div><div class="line">    root: path.join(__dirname, &apos;views&apos;),</div><div class="line">    autoescape: true,</div><div class="line">    cache: &apos;memory&apos;, // disable, set to false</div><div class="line">    ext: &apos;html&apos;</div><div class="line">&#125;));</div></pre></td></tr></table></figure><h3 id="在路由中使用-1"><a href="#在路由中使用-1" class="headerlink" title="在路由中使用"></a>在路由中使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var router = require(&apos;koa-router&apos;)();</div><div class="line"></div><div class="line">router.get(&apos;/&apos;, async function (ctx, next) &#123;</div><div class="line">  ctx.state = &#123;</div><div class="line">    title: &apos;Hello&apos;</div><div class="line">  &#125;;</div><div class="line">  await ctx.render(&apos;index&apos;);</div><div class="line">&#125;)</div><div class="line">module.exports = router;</div></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>以为node目前不支持async，app中必须使用<code>co.wrap</code>包装一下<code>render</code></li><li>可以使用<code>ctx.state</code>传递数据，可以不手动指定<code>ctx.body</code></li></ol></blockquote>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> Swig </tag>
            
            <tag> Koa </tag>
            
            <tag> Koa2 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
